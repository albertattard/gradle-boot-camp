{
  "entries": [
    {
      "type": "chapter",
      "id": "c3a5385a-c89e-4c52-8279-61b8a62b3aca",
      "parameters": [
        "Custom Gradle Task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "3d5ee1ce-2a6a-4594-adc1-f687aa14fab9",
      "parameters": [
        "rm -rf 'custom-gradle-task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "aa249fd7-4365-4289-9d2d-b991013c6f5e",
      "parameters": [
        "mkdir 'custom-gradle-task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "b2503ab4-3841-44fe-a81e-87fa48ecbc78",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git init --initial-branch=main"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "variable",
      "id": "6b5ee742-fd64-4a1e-a9da-d2be41b21fb1",
      "name": "DEVELOPER_NAME",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Albert Attard"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "sensitive": false
    },
    {
      "type": "variable",
      "id": "94b13a18-2cd3-4495-8bd9-e5b452bb1f8c",
      "name": "DEVELOPER_EMAIL",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "albertattard@gmail.com"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "sensitive": false
    },
    {
      "type": "command",
      "id": "3b2041c2-ee90-4c5e-8427-e6778ef30f03",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git config user.name '${DEVELOPER_NAME}'",
        "git config user.email '${DEVELOPER_EMAIL}'"
      ],
      "variables": [
        "DEVELOPER_NAME"
      ],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "2c92a27a-0b53-4b56-ad3c-d270e1b365c9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "gradle init --type basic --dsl groovy --project-name custom-gradle-task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "command",
      "id": "e0ca2397-a2d0-4cf3-81ed-215e94933a46",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew wrapper --gradle-version=7.3.3"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "command",
      "id": "c774fe0a-bf91-4b48-b8ab-a110abe59d38",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew --version"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "7af175d3-71c0-4675-9fa8-d5b0bfa33bfb",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/settings.gradle b/settings.gradle",
        "index fd273a0..5737df9 100644",
        "--- a/settings.gradle",
        "+++ b/settings.gradle",
        "@@ -1,10 +1 @@",
        "-/*",
        "- * This file was generated by the Gradle 'init' task.",
        "- *",
        "- * The settings file is used to specify which projects to include in your build.",
        "- *",
        "- * Detailed information about configuring a multi-project build in Gradle can be found",
        "- * in the user manual at https://docs.gradle.org/7.3.3/userguide/multi_project_builds.html",
        "- */",
        "-",
        " rootProject.name = 'custom-gradle-task'",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "dcd17055-6d79-45e2-af48-b158950e86e9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 893ec91..e69de29 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,6 +0,0 @@",
        "-/*",
        "- * This file was generated by the Gradle 'init' task.",
        "- *",
        "- * This is a general purpose Gradle build.",
        "- * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.3.3/samples",
        "- */",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "fccaf5e9-adbb-457a-aeb7-d26b521d4394",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/.gitignore b/.gitignore",
        "index 1b6985c..92b4736 100644",
        "--- a/.gitignore",
        "+++ b/.gitignore",
        "@@ -1,5 +1,5 @@",
        "-# Ignore Gradle project-specific cache directory",
        " .gradle",
        "-",
        "-# Ignore Gradle build output directory",
        "+.idea",
        "+.vscode",
        "+bin",
        " build",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "9d3a84f6-11af-48f7-a894-c53158fabea6",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git add .",
        "git commit --message 'Create project'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "section",
      "id": "5abcdde3-1012-45ee-ba57-9b7933058516",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Gradle ad-hoc task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "subsection",
      "id": "8dd8ce31-6e79-423e-83bc-a9706ad71af4",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Create ad-hoc task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "6c530518-d26b-4e9b-a60e-38c1ce58644a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git tag --annotate 'v1' --message 'Create ad-hoc task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "4aa26781-1f62-4612-b840-2dc9a26a91d8",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index e69de29..a03a9d1 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -0,0 +1,8 @@",
        "+tasks.register('hello') {",
        "+    group 'Greetings'",
        "+    description 'Prints a greeting message'",
        "+",
        "+    doLast {",
        "+        println 'Hello Gradle!!'",
        "+    }",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "06f8646b-5ea6-4647-81e4-0d416b55c0c0",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "7baa5a38-dfde-4b65-9ea8-579812b2c2ff",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "Greetings tasks",
        "---------------",
        "hello - Prints a greeting message",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "d857db52-8812-41b4-8aa0-a308a1400209",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew hello"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "b5c44c93-0913-481b-86c9-a38e38327443",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "> Task :hello",
        "Hello Gradle!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "8c6e23b0-b0b5-46b7-9274-133cd883984e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git add .",
        "git commit --message 'Add hello ad-hoc task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "subsection",
      "id": "79003875-deda-49a4-b7cf-d022acd569de",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Create ad-hoc Copy task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "10048d8b-e9e4-47af-8dcf-0e5a8aa3970b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git tag --annotate 'v2' --message 'Create ad-hoc Copy task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "7cdcd8bc-a5f4-4509-b187-e83cf26ca9d5",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "mkdir 'fixtures'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "f873bd9f-f99b-48dc-9358-66a6d2b3231a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'fixtures/welcome.txt'",
        "touch 'fixtures/happy-holidays.txt'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "50e40d6c-ff6d-4703-b8b5-ada06d505909",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/fixtures/happy-holidays.txt b/fixtures/happy-holidays.txt",
        "index e69de29..02e24dc 100644",
        "--- a/fixtures/happy-holidays.txt",
        "+++ b/fixtures/happy-holidays.txt",
        "@@ -0,0 +1 @@",
        "+On behalf of @NAME@, we would like to wish you happy holidays!!",
        "diff --git a/fixtures/welcome.txt b/fixtures/welcome.txt",
        "index e69de29..d942ad2 100644",
        "--- a/fixtures/welcome.txt",
        "+++ b/fixtures/welcome.txt",
        "@@ -0,0 +1 @@",
        "+Welcome to @NAME@!!",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "de9e257d-a1b6-400c-966b-e5195baaff97",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index d097655..120adae 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -6,3 +6,8 @@ tasks.register('hello') {",
        "         println 'Hello Gradle!!'",
        "     }",
        " }",
        "+",
        "+tasks.register('generateFixtures', Copy) {",
        "+    from 'fixtures'",
        "+    into \"${buildDir}/fixtures\"",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "82fd10dd-a0bb-4018-9c5c-4e157ccd821b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew generateFixtures"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "9add8d24-64c1-4a45-890e-db32a5288d3c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "tree build"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "8b866726-fd7d-4f7a-b4f4-341d4fcaf2a6",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "build",
        "`-- fixtures",
        "    |-- happy-holidays.txt",
        "    `-- welcome.txt",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "4362e48d-585e-4222-a1e7-968bccda5af2",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "cat 'build/fixtures/happy-holidays.txt'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "f4a15e2a-ab02-45fb-ba9d-fde23397325c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "",
        "```",
        "On behalf of @NAME@, we would like to wish you happy holidays!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "c12dec44-de74-436e-9f8e-6e4f81ea8447",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 120adae..b510a1c 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,3 +1,5 @@",
        "+import org.apache.tools.ant.filters.ReplaceTokens",
        "+",
        " tasks.register('hello') {",
        "     group 'Greetings'",
        "     description 'Prints a greeting message'",
        "@@ -10,4 +12,5 @@ tasks.register('hello') {",
        " tasks.register('generateFixtures', Copy) {",
        "     from 'fixtures'",
        "     into \"${buildDir}/fixtures\"",
        "+    filter(ReplaceTokens, tokens: [NAME: 'Gradle Boot Camp'])",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "5b54a05c-33e8-466c-bc50-b50f479b5530",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew generateFixtures"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "60a2aaad-6239-49fc-a7a7-2d74e412493b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "cat 'build/fixtures/happy-holidays.txt'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "35339c83-7835-4e68-bb6b-ac89baaa44d8",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "On behalf of Gradle Boot Camp, we would like to wish you happy holidays!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "88e424a5-3b5a-4a9f-a2bd-3f97272aa07b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git add .",
        "git commit --message 'Add generateFixtures ad-hoc Copy task'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "section",
      "id": "22a36204-3502-4c38-a68e-1fbc8d924102",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Gradle class task"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "subsection",
      "id": "b6c1640b-ca9c-4cfb-902d-91ebf180d36a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Hello class task (groovy)"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "a4a49d12-cc72-4f1e-a46a-563598828f78",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git tag --annotate 'v3' --message 'Hello class task (groovy)'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "14cbbfe1-335a-484b-a3d9-b8f046078b15",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "mkdir 'buildSrc'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "c9c1f2fd-9fb7-49ea-adfb-9dc6f7699810",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'buildSrc/settings.gradle'",
        "touch 'buildSrc/build.gradle'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "768998a1-430e-47f5-91d1-b923cbe907fd",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "mkdir -p 'buildSrc/src/main/groovy/gbc'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "488e61cb-420d-4cca-b72c-d1ba0de0d179",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'buildSrc/src/main/groovy/gbc/HelloTask.groovy'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "3e54152f-149f-42d9-95aa-d8632c49bd5b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc/HelloTask.groovy b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "index e69de29..03a5043 100644",
        "--- a/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "+++ b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "@@ -0,0 +1,6 @@",
        "+package gbc",
        "+",
        "+import org.gradle.api.DefaultTask",
        "+",
        "+abstract class HelloTask extends DefaultTask {",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "a0fac89b-931e-4869-ac20-0d36279fe892",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc/HelloTask.groovy b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "index 03a5043..044d141 100644",
        "--- a/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "+++ b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "@@ -1,6 +1,12 @@",
        " package gbc",
        " ",
        " import org.gradle.api.DefaultTask",
        "+import org.gradle.api.tasks.TaskAction",
        " ",
        " abstract class HelloTask extends DefaultTask {",
        "+",
        "+    @TaskAction",
        "+    def greet() {",
        "+        println 'Hello Gradle!!'",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "00cba692-3e78-4900-a8d4-2a920eea1b8d",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index b510a1c..09ab092 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,12 +1,9 @@",
        "+import gbc.HelloTask",
        " import org.apache.tools.ant.filters.ReplaceTokens",
        " ",
        "-tasks.register('hello') {",
        "+tasks.register('hello', HelloTask) {",
        "     group 'Greetings'",
        "     description 'Prints a greeting message'",
        "-",
        "-    doLast {",
        "-        println 'Hello Gradle!!'",
        "-    }",
        " }",
        " ",
        " tasks.register('generateFixtures', Copy) {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "3a30b991-31c9-403c-a669-7d946f7b9067",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew hello"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "6c6d904d-f617-4efe-82bb-ab07fac16e3f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "> Task :hello",
        "Hello Gradle!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "64a36fcc-b5b8-4c0e-b78d-7126af14b909",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 09ab092..e015551 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -2,8 +2,6 @@ import gbc.HelloTask",
        " import org.apache.tools.ant.filters.ReplaceTokens",
        " ",
        " tasks.register('hello', HelloTask) {",
        "-    group 'Greetings'",
        "-    description 'Prints a greeting message'",
        " }",
        " ",
        " tasks.register('generateFixtures', Copy) {",
        "diff --git a/buildSrc/src/main/groovy/gbc/HelloTask.groovy b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "index 044d141..a5443b1 100644",
        "--- a/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "+++ b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "@@ -5,6 +5,11 @@ import org.gradle.api.tasks.TaskAction",
        " ",
        " abstract class HelloTask extends DefaultTask {",
        " ",
        "+    HelloTask() {",
        "+        group = 'Greetings'",
        "+        description = 'Prints a greeting message'",
        "+    }",
        "+",
        "     @TaskAction",
        "     def greet() {",
        "         println 'Hello Gradle!!'",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "65b3829c-f215-4bb4-8e7f-ee5fd8fa22d6",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "c4e435d3-9bfb-4453-b6e4-61666986b367",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "",
        "```",
        "> Task :hello",
        "Hello Gradle!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "abeb4afc-bcfa-4b3a-b7fe-622aaac66330",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc/HelloTask.groovy b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "index a5443b1..51db36e 100644",
        "--- a/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "+++ b/buildSrc/src/main/groovy/gbc/HelloTask.groovy",
        "@@ -1,17 +1,24 @@",
        " package gbc",
        " ",
        " import org.gradle.api.DefaultTask",
        "+import org.gradle.api.provider.Property",
        "+import org.gradle.api.tasks.Input",
        " import org.gradle.api.tasks.TaskAction",
        " ",
        " abstract class HelloTask extends DefaultTask {",
        " ",
        "+    @Input",
        "+    abstract Property<String> getCaption()",
        "+",
        "     HelloTask() {",
        "         group = 'Greetings'",
        "         description = 'Prints a greeting message'",
        "+",
        "+        caption.convention(\"Gradle\")",
        "     }",
        " ",
        "     @TaskAction",
        "     def greet() {",
        "-        println 'Hello Gradle!!'",
        "+        println \"Hello ${caption.get()}!!\"",
        "     }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "77397d54-a154-49e7-b572-6c48d4e8d3c1",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew hello"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "29ca9bf6-c2de-47e8-8d40-e20c6265c678",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "> Task :hello",
        "Hello Gradle!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "9900d158-991c-4dfe-8156-897d790e8d36",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index e015551..47430d9 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -2,6 +2,7 @@ import gbc.HelloTask",
        " import org.apache.tools.ant.filters.ReplaceTokens",
        " ",
        " tasks.register('hello', HelloTask) {",
        "+    caption = 'there'",
        " }",
        " ",
        " tasks.register('generateFixtures', Copy) {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "3f1d1f2e-9dd2-4b9d-8a67-1a469dd965c8",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew hello"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "e30ffdb0-3ba5-40bc-a7cf-ebd6be09b644",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "```",
        "> Task :hello",
        "Hello there!!",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "d5e63f38-e528-43ba-970c-a360c403549a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git add .",
        "git commit --message 'Add hello class task (groovy)'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "subsection",
      "id": "9c65390f-a165-46f9-820a-afebc79aa9ca",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Compute file hash class task (java)"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "951d0fcf-048a-4e8c-acc8-8fa8612851c8",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "git tag --annotate 'v4' --message 'Compute file hash class task (java)'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "020bbdf4-26e4-45a5-93a8-28edcd570455",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "mkdir -p 'buildSrc/src/main/java/gbc'",
        "mkdir -p 'buildSrc/src/test/java/gbc'",
        "mkdir -p 'buildSrc/src/test/resources/fixtures'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "57847cda-1244-4c8d-8e67-015bb1234436",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'buildSrc/src/test/resources/fixtures/sample.txt'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "0c54f0b0-8d1c-47bd-a8d7-33b0dd7dcf0e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/resources/fixtures/sample.txt b/buildSrc/src/test/resources/fixtures/sample.txt",
        "index e69de29..69ea7b4 100644",
        "--- a/buildSrc/src/test/resources/fixtures/sample.txt",
        "+++ b/buildSrc/src/test/resources/fixtures/sample.txt",
        "@@ -0,0 +1,6 @@",
        "+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque tristique lacus et sapien vulputate fermentum. Fusce",
        "+euismod massa tincidunt accumsan consectetur. Donec ut eros iaculis nibh scelerisque aliquam. Quisque at posuere tortor.",
        "+Ut eget velit ultricies, pharetra massa a, tincidunt odio. In hac habitasse platea dictumst. Cras facilisis sapien at",
        "+suscipit dignissim. Phasellus iaculis, metus molestie accumsan eleifend, ante justo pulvinar felis, a dictum lacus felis",
        "+eu justo. Curabitur vel posuere eros. Duis congue enim at urna ullamcorper, vitae tincidunt nulla porttitor. Donec",
        "+tincidunt egestas ex a viverra. Morbi ligula neque, mollis sit amet porta condimentum, semper in tortor.",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "edb0d4aa-76f7-4a8d-bc58-419b300e469b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "openssl dgst -sha256 'buildSrc/src/test/resources/fixtures/sample.txt'",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "c927dd02-8f6f-49a6-9280-d23a192503ed",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle",
        "index e69de29..67084c3 100644",
        "--- a/buildSrc/build.gradle",
        "+++ b/buildSrc/build.gradle",
        "@@ -0,0 +1,15 @@",
        "+repositories {",
        "+    mavenCentral()",
        "+}",
        "+",
        "+testing {",
        "+    suites {",
        "+        test {",
        "+            useJUnitJupiter('5.8.2')",
        "+        }",
        "+    }",
        "+}",
        "+",
        "+dependencies {",
        "+    testImplementation gradleTestKit()",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "markdown",
      "id": "6efb251d-e17e-4e7f-a36b-056054576fde",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "[Using GradleRunner with Java and JUnit](https://docs.gradle.org/current/userguide/test_kit.html#example_using_gradlerunner_with_java_and_junit)"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "37147c6b-e239-4a2a-a91e-2507500d1aa0",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'buildSrc/src/test/java/gbc/HashFileTaskTest.java'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "e5f4faca-60b5-4edc-a0ac-48acd3126d21",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index e69de29..81d30e8 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -0,0 +1,21 @@",
        "+package gbc;",
        "+",
        "+import org.junit.jupiter.api.BeforeEach;",
        "+import org.junit.jupiter.api.io.TempDir;",
        "+",
        "+import java.io.File;",
        "+",
        "+class HashFileTaskTest {",
        "+",
        "+    @TempDir",
        "+    File testProjectDir;",
        "+",
        "+    private File settingsFile;",
        "+    private File buildScriptFile;",
        "+",
        "+    @BeforeEach",
        "+    void setup() {",
        "+        settingsFile = new File(testProjectDir, \"settings.gradle\");",
        "+        buildScriptFile = new File(testProjectDir, \"build.gradle\");",
        "+    }",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "0486eb20-2ad4-476c-a3c8-840039747390",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 81d30e8..dd6a9e8 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -1,9 +1,13 @@",
        " package gbc;",
        " ",
        " import org.junit.jupiter.api.BeforeEach;",
        "+import org.junit.jupiter.api.Test;",
        " import org.junit.jupiter.api.io.TempDir;",
        " ",
        " import java.io.File;",
        "+import java.io.IOException;",
        "+import java.nio.charset.StandardCharsets;",
        "+import java.nio.file.Files;",
        " ",
        " class HashFileTaskTest {",
        " ",
        "@@ -18,4 +22,13 @@ class HashFileTaskTest {",
        "         settingsFile = new File(testProjectDir, \"settings.gradle\");",
        "         buildScriptFile = new File(testProjectDir, \"build.gradle\");",
        "     }",
        "+",
        "+    @Test",
        "+    void createAdHocTask() throws IOException {",
        "+        writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "+    }",
        "+",
        "+    private static void writeFile(final File file, final String content) throws IOException {",
        "+        Files.writeString(file.toPath(), content, StandardCharsets.UTF_8);",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "98da24f6-c533-4894-9f5b-e32308d3f9d6",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index dd6a9e8..128c5b7 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -25,7 +25,16 @@ class HashFileTaskTest {",
        " ",
        "     @Test",
        "     void createAdHocTask() throws IOException {",
        "+        final String buildScript = \"\"\"",
        "+                tasks.register('hello') {",
        "+                    doLast {",
        "+                        println 'Hello Gradle!!'",
        "+                    }",
        "+                }",
        "+                \"\"\";",
        "+",
        "         writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "+        writeFile(buildScriptFile, buildScript);",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "1b196c1c-9208-4a6b-bdaa-9e840ccb9a32",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 128c5b7..ff82a80 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -1,5 +1,7 @@",
        " package gbc;",
        " ",
        "+import org.gradle.testkit.runner.BuildResult;",
        "+import org.gradle.testkit.runner.GradleRunner;",
        " import org.junit.jupiter.api.BeforeEach;",
        " import org.junit.jupiter.api.Test;",
        " import org.junit.jupiter.api.io.TempDir;",
        "@@ -35,6 +37,11 @@ class HashFileTaskTest {",
        " ",
        "         writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "         writeFile(buildScriptFile, buildScript);",
        "+",
        "+        final BuildResult result = GradleRunner.create()",
        "+                .withProjectDir(testProjectDir)",
        "+                .withArguments(\"hello\")",
        "+                .build();",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "85d663da-221d-45c3-a241-093fa86f22f1",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index ff82a80..78977d8 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -11,6 +11,10 @@ import java.io.IOException;",
        " import java.nio.charset.StandardCharsets;",
        " import java.nio.file.Files;",
        " ",
        "+import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;",
        "+import static org.junit.jupiter.api.Assertions.assertEquals;",
        "+import static org.junit.jupiter.api.Assertions.assertTrue;",
        "+",
        " class HashFileTaskTest {",
        " ",
        "     @TempDir",
        "@@ -42,6 +46,9 @@ class HashFileTaskTest {",
        "                 .withProjectDir(testProjectDir)",
        "                 .withArguments(\"hello\")",
        "                 .build();",
        "+",
        "+        assertTrue(result.getOutput().contains(\"Hello world!!\"));",
        "+        assertEquals(SUCCESS, result.task(\":hello\").getOutcome());",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "47a7e79d-99de-4fcd-a6e5-2ee21b5c52cf",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "8c6349a5-b244-446e-9bbf-2764ccc8ab45",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "```",
        "> Task :buildSrc:compileJava NO-SOURCE",
        "> Task :buildSrc:compileGroovy UP-TO-DATE",
        "> Task :buildSrc:processResources NO-SOURCE",
        "> Task :buildSrc:classes UP-TO-DATE",
        "> Task :buildSrc:jar UP-TO-DATE",
        "> Task :buildSrc:assemble UP-TO-DATE",
        "> Task :buildSrc:compileTestJava UP-TO-DATE",
        "> Task :buildSrc:compileTestGroovy NO-SOURCE",
        "> Task :buildSrc:processTestResources UP-TO-DATE",
        "> Task :buildSrc:testClasses UP-TO-DATE",
        "",
        "> Task :buildSrc:test",
        "",
        "HashFileTaskTest > createAdHocTask() FAILED",
        "    org.opentest4j.AssertionFailedError at HashFileTaskTest.java:50",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "e2cca010-502b-4863-9d7a-2a048719b5a9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 78977d8..b912694 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -47,7 +47,7 @@ class HashFileTaskTest {",
        "                 .withArguments(\"hello\")",
        "                 .build();",
        " ",
        "-        assertTrue(result.getOutput().contains(\"Hello world!!\"));",
        "+        assertTrue(result.getOutput().contains(\"Hello Gradle!!\"));",
        "         assertEquals(SUCCESS, result.task(\":hello\").getOutcome());",
        "     }",
        " ",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "e2e41cf7-806c-4b98-a90e-5a9963495a6f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "7e68dbc7-655c-4315-a5b7-5a7139b22b88",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index b912694..2cb725b 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -13,7 +13,6 @@ import java.nio.file.Files;",
        " ",
        " import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;",
        " import static org.junit.jupiter.api.Assertions.assertEquals;",
        "-import static org.junit.jupiter.api.Assertions.assertTrue;",
        " ",
        " class HashFileTaskTest {",
        " ",
        "@@ -30,12 +29,11 @@ class HashFileTaskTest {",
        "     }",
        " ",
        "     @Test",
        "-    void createAdHocTask() throws IOException {",
        "+    void computesHashOfFile() throws IOException {",
        "         final String buildScript = \"\"\"",
        "+                import gbc.HashFileTask",
        "+                ",
        "-                tasks.register('hello') {",
        "+                tasks.register('test', HashFileTask) {",
        "-                    doLast {",
        "-                        println 'Hello Gradle!!'",
        "-                    }",
        "                 }",
        "                 \"\"\";",
        " ",
        "@@ -44,11 +42,10 @@ class HashFileTaskTest {",
        " ",
        "         final BuildResult result = GradleRunner.create()",
        "                 .withProjectDir(testProjectDir)",
        "-                .withArguments(\"hello\")",
        "+                .withArguments(\"test\")",
        "                 .build();",
        " ",
        "-        assertTrue(result.getOutput().contains(\"Hello Gradle!!\"));",
        "-        assertEquals(SUCCESS, result.task(\":hello\").getOutcome());",
        "+        assertEquals(SUCCESS, result.task(\":test\").getOutcome());",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "1ce68804-5271-4ad7-9035-91536db3ae8e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "b276fd72-7e4f-4222-9c6e-f0b3cf1c1ef1",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "* What went wrong:",
        "Could not compile build file '/tmp/junit18212991374528557697/build.gradle'.",
        "> startup failed:",
        "  build file '/tmp/junit18212991374528557697/build.gradle': 1: unable to resolve class gbc.HashFileTaskTest",
        "   @ line 1, column 1.",
        "     import gbc.HashFileTaskTest",
        "     ^",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "f13e4a1a-9c2b-418a-adbd-0468acc1fd3a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "touch 'buildSrc/src/main/java/gbc/HashFileTask.java'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "aae4d7b6-d519-4eb0-9cfb-503a7151b25c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index e69de29..3a95609 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -0,0 +1,7 @@",
        "+package gbc;",
        "+",
        "+import org.gradle.api.DefaultTask;",
        "+",
        "+public abstract class HashFileTask extends DefaultTask {",
        "+",
        "+}",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "afaf6cfe-7187-4d2b-8c3d-d585007f34c0",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "9eb0af33-2ee7-4e0b-9e13-9151a55e2070",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 2cb725b..09aa812 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -9,7 +9,11 @@ import org.junit.jupiter.api.io.TempDir;",
        " import java.io.File;",
        " import java.io.IOException;",
        " import java.nio.charset.StandardCharsets;",
        "+import java.nio.file.FileVisitResult;",
        " import java.nio.file.Files;",
        "+import java.nio.file.Path;",
        "+import java.nio.file.SimpleFileVisitor;",
        "+import java.nio.file.attribute.BasicFileAttributes;",
        " ",
        " import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;",
        " import static org.junit.jupiter.api.Assertions.assertEquals;",
        "@@ -21,17 +25,19 @@ class HashFileTaskTest {",
        " ",
        "     private File settingsFile;",
        "     private File buildScriptFile;",
        "+    private File buildScrDir;",
        " ",
        "     @BeforeEach",
        "     void setup() {",
        "         settingsFile = new File(testProjectDir, \"settings.gradle\");",
        "         buildScriptFile = new File(testProjectDir, \"build.gradle\");",
        "+        buildScrDir = new File(testProjectDir, \"buildSrc\");",
        "     }",
        " ",
        "     @Test",
        "     void computesHashOfFile() throws IOException {",
        "         final String buildScript = \"\"\"",
        "                 import gbc.HashFileTask",
        "                 ",
        "                 tasks.register('test', HashFileTask) {",
        "                 }",
        "@@ -39,6 +45,7 @@ class HashFileTaskTest {",
        " ",
        "         writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "         writeFile(buildScriptFile, buildScript);",
        "+        copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        " ",
        "         final BuildResult result = GradleRunner.create()",
        "                 .withProjectDir(testProjectDir)",
        "@@ -51,4 +58,26 @@ class HashFileTaskTest {",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        "         Files.writeString(file.toPath(), content, StandardCharsets.UTF_8);",
        "     }",
        "+",
        "+    private static void copyDir(final File source, final File destination) throws IOException {",
        "+        copyDir(source.toPath(), destination.toPath());",
        "+    }",
        "+",
        "+    private static void copyDir(final Path source, final Path destination) throws IOException {",
        "+        Files.walkFileTree(source, new SimpleFileVisitor<>() {",
        "+            @Override",
        "+            public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {",
        "+                final Path resolve = destination.resolve(source.relativize(dir));",
        "+                Files.createDirectories(resolve);",
        "+                return FileVisitResult.CONTINUE;",
        "+            }",
        "+",
        "+            @Override",
        "+            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {",
        "+                final Path resolve = destination.resolve(source.relativize(file));",
        "+                Files.copy(file, resolve);",
        "+                return FileVisitResult.CONTINUE;",
        "+            }",
        "+        });",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "todo",
      "id": "29f6299d-8aa1-4386-97cd-40477d289343",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Check why the next command takes almost 5 minutes."
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "c48a86af-02a4-46c9-8278-66132c31b019",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 600.000000000
    },
    {
      "type": "markdown",
      "id": "8e065d75-4df7-45fc-a334-dbd7b11ec816",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "",
        "```",
        "org.opentest4j.AssertionFailedError: expected: <SUCCESS> but was: <UP_TO_DATE>",
        "\tat app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)",
        "\tat app//org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)",
        "\tat app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)",
        "\tat app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)",
        "\tat app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1141)",
        "\tat app//gbc.HashFileTaskTest.computesHashOfFile(HashFileTaskTest.java:55)",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "0b7d7a17-027a-4fb5-a041-0463511f79c3",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 09aa812..b09fd92 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -14,9 +14,11 @@ import java.nio.file.Files;",
        " import java.nio.file.Path;",
        " import java.nio.file.SimpleFileVisitor;",
        " import java.nio.file.attribute.BasicFileAttributes;",
        "+import java.util.Set;",
        " ",
        " import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;",
        "+import static org.gradle.testkit.runner.TaskOutcome.UP_TO_DATE;",
        "-import static org.junit.jupiter.api.Assertions.assertEquals;",
        "+import static org.junit.jupiter.api.Assertions.assertTrue;",
        " ",
        " class HashFileTaskTest {",
        " ",
        "@@ -52,7 +54,7 @@ class HashFileTaskTest {",
        "                 .withArguments(\"test\")",
        "                 .build();",
        " ",
        "-        assertEquals(SUCCESS, result.task(\":test\").getOutcome());",
        "+        assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "56afb520-2605-4fd6-bfec-b371c66ea71f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 60.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "89f9e9bd-9813-4c1f-bd67-3ca16913a01f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 8122fd7..0dcfa98 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -1,7 +1,16 @@",
        " package gbc;",
        " ",
        " import org.gradle.api.DefaultTask;",
        "+import org.gradle.api.tasks.TaskAction;",
        " ",
        " public abstract class HashFileTask extends DefaultTask {",
        " ",
        "+    public HashFileTask() {",
        "+        setGroup(\"Hash Files\");",
        "+        setDescription(\"Creates a new file containing the hash for the given file\");",
        "+    }",
        "+",
        "+    @TaskAction",
        "+    void execute() {",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "a91f26d6-001b-44fd-92d1-1e2af56f5048",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "00bb0b9e-55c8-4d7a-ba43-0ea5d5b85edd",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index b09fd92..5bdc50f 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -42,6 +42,7 @@ class HashFileTaskTest {",
        "                 import gbc.HashFileTask",
        "                 ",
        "                 tasks.register('test', HashFileTask) {",
        "+                    file = project.file('fixtures/sample.txt')",
        "                 }",
        "                 \"\"\";",
        " ",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "d9c80e17-e84c-49fd-b7a7-c38c5bd633ea",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 2bae7a4..84d79a8 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -28,12 +28,14 @@ class HashFileTaskTest {",
        "     private File settingsFile;",
        "     private File buildScriptFile;",
        "     private File buildScrDir;",
        "+    private File fixturesFile;",
        " ",
        "     @BeforeEach",
        "     void setup() {",
        "         settingsFile = new File(testProjectDir, \"settings.gradle\");",
        "         buildScriptFile = new File(testProjectDir, \"build.gradle\");",
        "         buildScrDir = new File(testProjectDir, \"buildSrc\");",
        "+        fixturesFile = new File(testProjectDir, \"fixtures/sample.txt\");",
        "     }",
        " ",
        "     @Test",
        "@@ -49,6 +51,7 @@ class HashFileTaskTest {",
        "         writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "         writeFile(buildScriptFile, buildScript);",
        "         copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        "+        copyFile(new File(\"src/test/resources/fixtures/sample.txt\"), fixturesFile);",
        " ",
        "         final BuildResult result = GradleRunner.create()",
        "                 .withProjectDir(testProjectDir)",
        "@@ -83,4 +86,20 @@ class HashFileTaskTest {",
        "             }",
        "         });",
        "     }",
        "+",
        "+    private static void copyFile(final File source, final File destination) throws IOException {",
        "+        copyFile(source.toPath(), destination.toPath());",
        "+    }",
        "+",
        "+    private static void copyFile(final Path source, final Path destination) throws IOException {",
        "+        ensureParentExists(destination);",
        "+        Files.copy(source, destination);",
        "+    }",
        "+",
        "+    private static void ensureParentExists(final Path file) throws IOException {",
        "+        final Path parent = file.toAbsolutePath().getParent();",
        "+        if (!Files.isDirectory(parent)) {",
        "+            Files.createDirectories(parent);",
        "+        }",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "359cc276-0e2c-436d-af84-05157f61eb49",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "4fa92a80-c163-4828-a20c-33e74727d73a",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "* What went wrong:",
        "A problem occurred configuring root project 'hash-file'.",
        "> Could not create task ':test'.",
        "   > Could not set unknown property 'file' for task ':test' of type gbc.HashFileTask.",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "eea82db3-0af9-4cfa-b2c8-8c2877c2adaf",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 85cb3da..c09e624 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -1,10 +1,17 @@",
        " package gbc;",
        " ",
        " import org.gradle.api.DefaultTask;",
        "+import org.gradle.api.provider.Property;",
        "+import org.gradle.api.tasks.InputFile;",
        " import org.gradle.api.tasks.TaskAction;",
        " ",
        "+import java.io.File;",
        "+",
        " public abstract class HashFileTask extends DefaultTask {",
        " ",
        "+    @InputFile",
        "+    abstract Property<File> getFile();",
        "+",
        "     public HashFileTask() {",
        "         setGroup(\"Hash Files\");",
        "         setDescription(\"Creates a new file containing the hash for the given file\");",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "e4cd8f98-a6e2-4f5d-a55d-0c6b6b370ec7",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "f6dc2fc1-fcfa-47d4-8ed8-a124945b8d3e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 4025710..d87a157 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -45,6 +45,7 @@ class HashFileTaskTest {",
        "                 ",
        "                 tasks.register('test', HashFileTask) {",
        "                     file = project.file('fixtures/sample.txt')",
        "+                    output = project.layout.buildDirectory.file('fixtures/sample.txt.sha256').get().asFile",
        "                 }",
        "                 \"\"\";",
        " ",
        "@@ -59,6 +60,9 @@ class HashFileTaskTest {",
        "                 .build();",
        " ",
        "         assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "+",
        "+        final File shaFile = new File(testProjectDir, \"build/fixtures/sample.txt.sha256\");",
        "+        assertTrue(shaFile.isFile());",
        "     }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "04e4e981-defb-44b0-9ccc-cadf44365dc6",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "8f8e95ac-2226-4bd0-8c04-a0eb8229c20e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "```",
        "* What went wrong:",
        "A problem occurred configuring root project 'hash-file'.",
        "> Could not create task ':test'.",
        "   > Could not set unknown property 'output' for task ':test' of type gbc.HashFileTask.",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "4f160610-bb61-4dc8-a473-438ec56650f3",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index c09e624..7772cda 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -1,17 +1,25 @@",
        " package gbc;",
        " ",
        " import org.gradle.api.DefaultTask;",
        "+import org.gradle.api.GradleException;",
        " import org.gradle.api.provider.Property;",
        " import org.gradle.api.tasks.InputFile;",
        "+import org.gradle.api.tasks.OutputFile;",
        " import org.gradle.api.tasks.TaskAction;",
        " ",
        " import java.io.File;",
        "+import java.io.IOException;",
        "+import java.nio.file.Files;",
        "+import java.nio.file.Path;",
        " ",
        " public abstract class HashFileTask extends DefaultTask {",
        " ",
        "     @InputFile",
        "     abstract Property<File> getFile();",
        " ",
        "+    @OutputFile",
        "+    abstract Property<File> getOutput();",
        "+",
        "     public HashFileTask() {",
        "         setGroup(\"Hash Files\");",
        "         setDescription(\"Creates a new file containing the hash for the given file\");",
        "@@ -19,5 +27,11 @@ public abstract class HashFileTask extends DefaultTask {",
        " ",
        "     @TaskAction",
        "     void execute() {",
        "+        try {",
        "+            final Path output = getOutput().get().toPath();",
        "+            Files.createFile(output);",
        "+        } catch (final IOException e) {",
        "+            throw new GradleException(\"Failed to hash file\", e);",
        "+        }",
        "     }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "6fd6f500-c847-4d91-9cf5-aaad89c383d3",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "cb5e0e95-1bf8-4072-8514-b4e6125866f9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index d87a157..dbe82f2 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -18,6 +18,7 @@ import java.util.Set;",
        " ",
        " import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;",
        " import static org.gradle.testkit.runner.TaskOutcome.UP_TO_DATE;",
        "+import static org.junit.jupiter.api.Assertions.assertEquals;",
        " import static org.junit.jupiter.api.Assertions.assertTrue;",
        " ",
        " class HashFileTaskTest {",
        "@@ -63,6 +64,11 @@ class HashFileTaskTest {",
        " ",
        "         final File shaFile = new File(testProjectDir, \"build/fixtures/sample.txt.sha256\");",
        "         assertTrue(shaFile.isFile());",
        "+        assertEquals(\"f56d1579dc0daf30a0e08932590f834702c5af4b9accf207d6e08f4acb52f5e3\", readFile(shaFile));",
        "     }",
        "+",
        "+    private static String readFile(final File file) throws IOException {",
        "+        return Files.readString(file.toPath(), StandardCharsets.UTF_8);",
        "+    }",
        " ",
        "     private static void writeFile(final File file, final String content) throws IOException {",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "fd8938c7-614f-4a08-9236-1cea40f42db7",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "826ac7f2-2d1f-4b52-b709-6db3551f49d0",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "",
        "```",
        "org.opentest4j.AssertionFailedError: expected: <f56d1579dc0daf30a0e08932590f834702c5af4b9accf207d6e08f4acb52f5e3> but was: <>",
        "\tat app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)",
        "\tat app//org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)",
        "\tat app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)",
        "\tat app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)",
        "\tat app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1141)",
        "\tat app//gbc.HashFileTaskTest.computesHashOfFile(HashFileTaskTest.java:67)",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "30c8153b-3d5b-4dd4-8790-24fe6ddbd66d",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 7772cda..d49896c 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -7,10 +7,15 @@ import org.gradle.api.tasks.InputFile;",
        " import org.gradle.api.tasks.OutputFile;",
        " import org.gradle.api.tasks.TaskAction;",
        " ",
        "+import java.io.BufferedInputStream;",
        " import java.io.File;",
        "+import java.io.FileInputStream;",
        " import java.io.IOException;",
        " import java.nio.file.Files;",
        " import java.nio.file.Path;",
        "+import java.security.DigestInputStream;",
        "+import java.security.MessageDigest;",
        "+import java.security.NoSuchAlgorithmException;",
        " ",
        " public abstract class HashFileTask extends DefaultTask {",
        " ",
        "@@ -34,4 +39,15 @@ public abstract class HashFileTask extends DefaultTask {",
        "             throw new GradleException(\"Failed to hash file\", e);",
        "         }",
        "     }",
        "+",
        "+    private byte[] readHash() throws NoSuchAlgorithmException, IOException {",
        "+        final File file = getFile().get();",
        "+",
        "+        final MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");",
        "+        try (DigestInputStream dis = new DigestInputStream(new BufferedInputStream(new FileInputStream(file)), digest)) {",
        "+            while (dis.read() != -1) {/* Read the file and compute the hash */}",
        "+        }",
        "+",
        "+        return digest.digest();",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "894a462c-dfdc-4970-b943-75a0a1d49e79",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index d49896c..3d61281 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -50,4 +50,17 @@ public abstract class HashFileTask extends DefaultTask {",
        " ",
        "         return digest.digest();",
        "     }",
        "+",
        "+    private static String bytesToHex(final byte[] bytes) {",
        "+        final StringBuilder buffer = new StringBuilder(2 * bytes.length);",
        "+        for (byte b : bytes) {",
        "+            final String hex = Integer.toHexString(0xff & b);",
        "+            if (hex.length() == 1) {",
        "+                buffer.append('0');",
        "+            }",
        "+            buffer.append(hex);",
        "+        }",
        "+",
        "+        return buffer.toString();",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "a0920163-0922-43d1-bc60-a31b48c7c3be",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 3d61281..b1e6cff 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -63,4 +63,11 @@ public abstract class HashFileTask extends DefaultTask {",
        " ",
        "         return buffer.toString();",
        "     }",
        "+",
        "+    private static void ensureParentExists(final Path file) throws IOException {",
        "+        final Path parent = file.toAbsolutePath().getParent();",
        "+        if (!Files.isDirectory(parent)) {",
        "+            Files.createDirectories(parent);",
        "+        }",
        "+    }",
        " }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "a8c0913a-19f5-42f7-a277-cc24dd2be8c9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index b1e6cff..29d79ce 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -11,6 +11,7 @@ import java.io.BufferedInputStream;",
        " import java.io.File;",
        " import java.io.FileInputStream;",
        " import java.io.IOException;",
        "+import java.nio.charset.StandardCharsets;",
        " import java.nio.file.Files;",
        " import java.nio.file.Path;",
        " import java.security.DigestInputStream;",
        "@@ -33,9 +34,13 @@ public abstract class HashFileTask extends DefaultTask {",
        "     @TaskAction",
        "     void execute() {",
        "         try {",
        "+            final byte[] bytes = readHash();",
        "+            final String hex = bytesToHex(bytes);",
        "+",
        "             final Path output = getOutput().get().toPath();",
        "-            Files.createFile(output);",
        "+            ensureParentExists(output);",
        "+            Files.writeString(output, hex, StandardCharsets.UTF_8);",
        "-        } catch (final IOException e) {",
        "+        } catch (final IOException | NoSuchAlgorithmException e) {",
        "             throw new GradleException(\"Failed to hash file\", e);",
        "         }",
        "     }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "8bb5e653-8147-425b-ad1d-f7f989946d7c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "subsection",
      "id": "8be71533-d2f2-4664-98b5-2d8b3f90a08f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Default parameters values (by convention)"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "465357a6-723d-41d3-9e18-30995c3a0e38",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "openssl dgst -sha512 'buildSrc/src/test/resources/fixtures/sample.txt'"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "0317675f-9488-4933-af0c-957ea850c28b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index dbe82f2..f709401 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -67,6 +67,35 @@ class HashFileTaskTest {",
        "         assertEquals(\"f56d1579dc0daf30a0e08932590f834702c5af4b9accf207d6e08f4acb52f5e3\", readFile(shaFile));",
        "     }",
        " ",
        "+    @Test",
        "+    void computesSpecificHashOfFile() throws IOException {",
        "+        final String buildScript = \"\"\"",
        "+                import gbc.HashFileTask",
        "+                ",
        "+                tasks.register('test', HashFileTask) {",
        "+                    file = project.file('fixtures/sample.txt')",
        "+                    output = project.layout.buildDirectory.file('fixtures/sample.txt.sha512').get().asFile",
        "+                    algorithm = 'SHA-512'",
        "+                }",
        "+                \"\"\";",
        "+",
        "+        writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "+        writeFile(buildScriptFile, buildScript);",
        "+        copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        "+        copyFile(new File(\"src/test/resources/fixtures/sample.txt\"), fixturesFile);",
        "+",
        "+        final BuildResult result = GradleRunner.create()",
        "+                .withProjectDir(testProjectDir)",
        "+                .withArguments(\"test\")",
        "+                .build();",
        "+",
        "+        assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "+",
        "+        final File shaFile = new File(testProjectDir, \"build/fixtures/sample.txt.sha512\");",
        "+        assertTrue(shaFile.isFile());",
        "+        assertEquals(\"9817269eb259a72b6c87ffb43a9bb2abbfdb6bccf4dc973c016c05da14d274d06f3376512681cef52bf723b8e61949fd9a4ad4bdb9d0f1ea5a3d34a07db7bc34\", readFile(shaFile));",
        "+    }",
        "+",
        "     private static String readFile(final File file) throws IOException {",
        "         return Files.readString(file.toPath(), StandardCharsets.UTF_8);",
        "     }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "6664b529-5a1f-49ee-b894-05111011a4b0",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "0fd0889e-e498-4ecc-82ea-459fd5407f2b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "",
        "",
        "```",
        "* What went wrong:",
        "A problem occurred configuring root project 'hash-file'.",
        "> Could not create task ':test'.",
        "   > Could not set unknown property 'algorithm' for task ':test' of type gbc.HashFileTask.",
        "```"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "aa13e9e2-affa-46e7-8117-8230b092ffc3",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 29d79ce..fce1550 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -3,6 +3,7 @@ package gbc;",
        " import org.gradle.api.DefaultTask;",
        " import org.gradle.api.GradleException;",
        " import org.gradle.api.provider.Property;",
        "+import org.gradle.api.tasks.Input;",
        " import org.gradle.api.tasks.InputFile;",
        " import org.gradle.api.tasks.OutputFile;",
        " import org.gradle.api.tasks.TaskAction;",
        "@@ -26,9 +27,14 @@ public abstract class HashFileTask extends DefaultTask {",
        "     @OutputFile",
        "     abstract Property<File> getOutput();",
        " ",
        "+    @Input",
        "+    abstract Property<String> getAlgorithm();",
        "+",
        "     public HashFileTask() {",
        "         setGroup(\"Hash Files\");",
        "         setDescription(\"Creates a new file containing the hash for the given file\");",
        "+",
        "+        getAlgorithm().convention(\"SHA-256\");",
        "     }",
        " ",
        "     @TaskAction",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "835b1a12-15f7-42b5-9372-b2c7ee83ed90",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index fce1550..95acda9 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -53,8 +53,9 @@ public abstract class HashFileTask extends DefaultTask {",
        " ",
        "     private byte[] readHash() throws NoSuchAlgorithmException, IOException {",
        "         final File file = getFile().get();",
        "+        final String algorithm = getAlgorithm().get();",
        " ",
        "-        final MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");",
        "+        final MessageDigest digest = MessageDigest.getInstance(algorithm);",
        "         try (DigestInputStream dis = new DigestInputStream(new BufferedInputStream(new FileInputStream(file)), digest)) {",
        "             while (dis.read() != -1) {/* Read the file and compute the hash */}",
        "         }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "45a54869-10ae-423c-93a8-c1540b5ae81c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 60.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "c778813e-1a46-4dc9-bd83-ff14b066780e",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index f709401..8ebed68 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -96,6 +96,28 @@ class HashFileTaskTest {",
        "         assertEquals(\"9817269eb259a72b6c87ffb43a9bb2abbfdb6bccf4dc973c016c05da14d274d06f3376512681cef52bf723b8e61949fd9a4ad4bdb9d0f1ea5a3d34a07db7bc34\", readFile(shaFile));",
        "     }",
        " ",
        "+    private void runBuildScript(final String configuration) throws IOException {",
        "+        final String buildScript = \"\"\"",
        "+                import gbc.HashFileTask",
        "+                ",
        "+                tasks.register('test', HashFileTask) {",
        "+                %s",
        "+                }",
        "+                \"\"\";",
        "+",
        "+        writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "+        writeFile(buildScriptFile, String.format(buildScript, configuration));",
        "+        copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        "+        copyFile(new File(\"src/test/resources/fixtures/sample.txt\"), fixturesFile);",
        "+",
        "+        final BuildResult result = GradleRunner.create()",
        "+                .withProjectDir(testProjectDir)",
        "+                .withArguments(\"test\")",
        "+                .build();",
        "+",
        "+        assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "+    }",
        "+",
        "     private static String readFile(final File file) throws IOException {",
        "         return Files.readString(file.toPath(), StandardCharsets.UTF_8);",
        "     }",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "a65de8f8-3c20-4fe9-ad24-98bcc56048b9",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index 8ebed68..a036c87 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -41,26 +41,12 @@ class HashFileTaskTest {",
        " ",
        "     @Test",
        "     void computesHashOfFile() throws IOException {",
        "-        final String buildScript = \"\"\"",
        "+        final String configuration = \"\"\"",
        "-                import gbc.HashFileTask",
        "-                ",
        "-                tasks.register('test', HashFileTask) {",
        "                     file = project.file('fixtures/sample.txt')",
        "                     output = project.layout.buildDirectory.file('fixtures/sample.txt.sha256').get().asFile",
        "-                }",
        "                 \"\"\";",
        " ",
        "-        writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "-        writeFile(buildScriptFile, buildScript);",
        "-        copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        "-        copyFile(new File(\"src/test/resources/fixtures/sample.txt\"), fixturesFile);",
        "-",
        "-        final BuildResult result = GradleRunner.create()",
        "-                .withProjectDir(testProjectDir)",
        "-                .withArguments(\"test\")",
        "-                .build();",
        "-",
        "-        assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "+        runBuildScript(configuration);",
        " ",
        "         final File shaFile = new File(testProjectDir, \"build/fixtures/sample.txt.sha256\");",
        "         assertTrue(shaFile.isFile());",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "command",
      "id": "ec85e6c0-0020-4890-8051-b4432a81651b",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "./gradlew tasks"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {},
      "commandTimeout": 30.000000000
    },
    {
      "type": "git-apply-patch",
      "id": "711e4ade-6669-4356-8739-f227ede8f50f",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/test/java/gbc/HashFileTaskTest.java b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "index a036c87..29d4952 100644",
        "--- a/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "+++ b/buildSrc/src/test/java/gbc/HashFileTaskTest.java",
        "@@ -55,27 +55,13 @@ class HashFileTaskTest {",
        " ",
        "     @Test",
        "     void computesSpecificHashOfFile() throws IOException {",
        "-        final String buildScript = \"\"\"",
        "+        final String configuration = \"\"\"",
        "-                import gbc.HashFileTask",
        "-                ",
        "-                tasks.register('test', HashFileTask) {",
        "                     file = project.file('fixtures/sample.txt')",
        "                     output = project.layout.buildDirectory.file('fixtures/sample.txt.sha512').get().asFile",
        "                     algorithm = 'SHA-512'",
        "-                }",
        "                 \"\"\";",
        " ",
        "-        writeFile(settingsFile, \"rootProject.name = 'hash-file'\");",
        "-        writeFile(buildScriptFile, buildScript);",
        "-        copyDir(new File(\"src/main\"), new File(buildScrDir, \"src/main\"));",
        "-        copyFile(new File(\"src/test/resources/fixtures/sample.txt\"), fixturesFile);",
        "-",
        "-        final BuildResult result = GradleRunner.create()",
        "-                .withProjectDir(testProjectDir)",
        "-                .withArguments(\"test\")",
        "-                .build();",
        "-",
        "-        assertTrue(Set.of(SUCCESS, UP_TO_DATE).contains(result.task(\":test\").getOutcome()));",
        "+        runBuildScript(configuration);",
        " ",
        "         final File shaFile = new File(testProjectDir, \"build/fixtures/sample.txt.sha512\");",
        "         assertTrue(shaFile.isFile());",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "git-apply-patch",
      "id": "e5beae02-edd2-4bdd-b4ce-8c42ae729c9c",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "diff --git a/buildSrc/src/main/java/gbc/HashFileTask.java b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "index 95acda9..4aeede8 100644",
        "--- a/buildSrc/src/main/java/gbc/HashFileTask.java",
        "+++ b/buildSrc/src/main/java/gbc/HashFileTask.java",
        "@@ -42,15 +42,18 @@ public abstract class HashFileTask extends DefaultTask {",
        "         try {",
        "             final byte[] bytes = readHash();",
        "             final String hex = bytesToHex(bytes);",
        "-",
        "-            final Path output = getOutput().get().toPath();",
        "-            ensureParentExists(output);",
        "-            Files.writeString(output, hex, StandardCharsets.UTF_8);",
        "+            writeHash(hex);",
        "         } catch (final IOException | NoSuchAlgorithmException e) {",
        "             throw new GradleException(\"Failed to hash file\", e);",
        "         }",
        "     }",
        " ",
        "+    private void writeHash(final String hex) throws IOException {",
        "+        final Path output = getOutput().get().toPath();",
        "+        ensureParentExists(output);",
        "+        Files.writeString(output, hex, StandardCharsets.UTF_8);",
        "+    }",
        "+",
        "     private byte[] readHash() throws NoSuchAlgorithmException, IOException {",
        "         final File file = getFile().get();",
        "         final String algorithm = getAlgorithm().get();",
        ""
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    },
    {
      "type": "subsection",
      "id": "0cc8adf9-8ba3-4c0f-9eb4-54d2875e08bc",
      "workingDirectory": "custom-gradle-task",
      "parameters": [
        "Optional properties"
      ],
      "variables": [],
      "environmentVariables": [],
      "values": {}
    }
  ]
}