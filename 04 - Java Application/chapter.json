{
  "entries": [
    {
      "type": "chapter",
      "id": "1ada9223-4688-4cee-a307-bbf0e4cfe8b5",
      "parameters": [
        "Title:1",
        "Java Application",
        "Description:2",
        "Takes the Gradle fundamental concepts and applies them to create a Java application that takes advantage of Gradle's",
        "abilities to automate nuance tasks."
      ]
    },
    {
      "type": "markdown",
      "id": "57869e3b-3fe9-42b6-8c0d-852783906c77",
      "parameters": [
        "In this chapter we will create a simple Java _hello world_ application and will use Gradle to build our application. We",
        "will use different plugins to dependencies to showcase how we can take advantage from Gradle during development.",
        ""
      ]
    },
    {
      "type": "section",
      "id": "3e774315-b995-4bce-85d7-aec2e52c5166",
      "parameters": [
        "Create the project"
      ]
    },
    {
      "type": "markdown",
      "id": "65e443fe-231b-46e1-8d9b-13faa14bd06c",
      "parameters": [
        "Let's start by deleting the directory that we will be working on `single-java-project`. This makes sure that there is no",
        "residue and that we are working in a clean slate.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "5eaba0c3-832a-4aef-823b-ec1f3a6de2fd",
      "parameters": [
        "rm -rf 'single-java-project'"
      ]
    },
    {
      "type": "markdown",
      "id": "fd18f1ff-8219-41cd-9275-95f6bb48f04c",
      "parameters": [
        "Create the directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "4a670889-c4f3-4e1d-b9ea-29bb1a6549a0",
      "parameters": [
        "mkdir 'single-java-project'"
      ]
    },
    {
      "type": "markdown",
      "id": "cd66653e-15fe-491c-b4d9-d8e48499fd44",
      "parameters": [
        "Add version control so that we can track our changes.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "5ba242df-1b0c-4b1b-ab98-97ecf231454b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git init --initial-branch=main"
      ]
    },
    {
      "type": "markdown",
      "id": "e392e5fe-01b2-4a73-953b-30432689b1c5",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Set Git's user (_developer_) name, using the providing variable. Press enter after entering your name and the rest will",
        "update automatically.",
        ""
      ]
    },
    {
      "type": "variable",
      "id": "6727d8b9-951e-4a38-9a48-0e5d6fe476f6",
      "name": "DEVELOPER_NAME",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Albert Attard"
      ],
      "sensitive": false
    },
    {
      "type": "markdown",
      "id": "26183d7d-8f9b-4275-83df-d6850e3ab58d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Set Git's user (_developer_) email, using the providing variable. Press enter after entering your name and the rest will",
        "update automatically. The email is more important than the name as Git uses this to identify you in the event you push",
        "these to a remote repository.",
        ""
      ]
    },
    {
      "type": "variable",
      "id": "a530b6d9-16d0-4a67-b6a5-fc16d994f708",
      "name": "DEVELOPER_EMAIL",
      "workingDirectory": "single-java-project",
      "parameters": [
        "albertattard@gmail.com"
      ],
      "sensitive": false
    },
    {
      "type": "command",
      "id": "2643954e-6574-4103-869b-2defe7f172d6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git config user.name '${DEVELOPER_NAME}'",
        "git config user.email '${DEVELOPER_EMAIL}'"
      ],
      "variables": [
        "DEVELOPER_NAME",
        "DEVELOPER_EMAIL"
      ]
    },
    {
      "type": "markdown",
      "id": "4881cd81-8b4d-49a5-ab9f-cf89f1bfc136",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's verify that our Git configuration was properly applied.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "92473c0b-2ae3-447f-9356-a4fd112674a0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git config --list --local"
      ]
    },
    {
      "type": "markdown",
      "id": "20e11046-66e3-47ab-b184-0bbba803ca1f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Both name and email should be properly set, as shown next.",
        "",
        "```",
        "user.name=${DEVELOPER_NAME}",
        "user.email=${DEVELOPER_EMAIL}",
        "```",
        "",
        "Let's create a basic Gradle project using Groovy as the DSL language.",
        ""
      ],
      "variables": [
        "DEVELOPER_NAME",
        "DEVELOPER_EMAIL"
      ]
    },
    {
      "type": "command",
      "id": "661c0ea7-d8ab-4cc1-838f-c90a423b84b5",
      "workingDirectory": "single-java-project",
      "parameters": [
        "gradle init --type basic --dsl groovy --project-name single-java-project"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "615c7cb0-e31a-4fdd-a56e-3826e04b8fca",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's also set the version of Gradle to be used to 7.4.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2243a72e-149f-4c39-8342-3c11f39ed4d2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew wrapper --gradle-version=7.4"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "e5e8b55e-0ea6-44a6-92bd-1e6327d4dc49",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's update the `.gitignore` file.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "9d707933-c401-463d-aef3-57f7c500ef0b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/.gitignore b/.gitignore",
        "index 1b6985c..e0d53d8 100644",
        "--- a/.gitignore",
        "+++ b/.gitignore",
        "@@ -1,5 +1,5 @@",
        "-# Ignore Gradle project-specific cache directory",
        " .gradle",
        "-",
        "-# Ignore Gradle build output directory",
        "+.idea",
        "+.vscode",
        "+bin",
        " build",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "cff8c4c5-0931-4393-b695-f13f802f3f48",
      "workingDirectory": "single-java-project",
      "parameters": [
        "And remove the comments from the `settings.gradle` file.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "e505a9d5-616f-463c-8df4-ac9db2ce9ee4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/settings.gradle b/settings.gradle",
        "index 32cbb70..d9a028e 100644",
        "--- a/settings.gradle",
        "+++ b/settings.gradle",
        "@@ -1,10 +1 @@",
        "-/*",
        "- * This file was generated by the Gradle 'init' task.",
        "- *",
        "- * The settings file is used to specify which projects to include in your build.",
        "- *",
        "- * Detailed information about configuring a multi-project build in Gradle can be found",
        "- * in the user manual at https://docs.gradle.org/7.4/userguide/multi_project_builds.html",
        "- */",
        "-",
        " rootProject.name = 'single-java-project'",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "6fe0feaf-b7db-444a-bf3c-4ed6bd436251",
      "workingDirectory": "single-java-project",
      "parameters": [
        "And the `build.gradle` file.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "9b930e53-1bc8-4804-8e90-d629934d4d32",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 893ec91..e69de29 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,6 +0,0 @@",
        "-/*",
        "- * This file was generated by the Gradle 'init' task.",
        "- *",
        "- * This is a general purpose Gradle build.",
        "- * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4/samples",
        "- */",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "ed62df0a-54c0-48e0-a718-bfa9372337cf",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Our project us now ready. Let's commit the changes made so far before moving forward.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "aca12f3b-bfd5-409e-b605-c3977d53c073",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Create project'"
      ]
    },
    {
      "type": "section",
      "id": "d5799250-3e7c-4ea5-b82a-03ccfeff4898",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The java plugin"
      ]
    },
    {
      "type": "markdown",
      "id": "a92cd35a-503d-45ae-be48-794cf7b301ed",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Gradle provides a plugin that can be used with Java projects,",
        "the [`java` Gradle plugin](https://docs.gradle.org/current/userguide/java_plugin.html). This plugin includes tasks,",
        "like [`compileJava`](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html)",
        "and [`test`](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html).",
        "",
        "Let's tag our progress, so that we can refer back to this point in the code if needs be.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "08f5f1da-f604-402d-af61-5049ca9be582",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v1' --message 'The java plugin'"
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "ffcfc3fb-c832-436b-970c-7f8159c195fa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index e69de29..075ba3d 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -0,0 +1,3 @@",
        "+plugins {",
        "+    id 'java'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "41c84de7-e73a-4e0b-9aed-0b8de728e16d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's list the tasks now available to our project to see what new tasks are available now that we have the `java` plugin.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d31f675d-b085-4d16-a63c-4502354a429a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew tasks"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "d31a3569-f77c-40f6-bc22-61d386265273",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Two new groups, the _Build tasks_ and the _Verification tasks_ are added.",
        "",
        "```",
        "Build tasks",
        "-----------",
        "assemble - Assembles the outputs of this project.",
        "build - Assembles and tests this project.",
        "buildDependents - Assembles and tests this project and all projects that depend on it.",
        "buildNeeded - Assembles and tests this project and all projects it depends on.",
        "classes - Assembles main classes.",
        "clean - Deletes the build directory.",
        "jar - Assembles a jar archive containing the main classes.",
        "testClasses - Assembles test classes.",
        "```",
        "",
        "```",
        "Verification tasks",
        "------------------",
        "check - Runs all checks.",
        "test - Runs the test suite.",
        "```",
        "",
        "The following image (copied from [here](https://docs.gradle.org/current/userguide/java_plugin.html#lifecycle_tasks))",
        "shows all these tasks and their dependencies.",
        "",
        "![Figure 1. Java plugin - tasks](https://docs.gradle.org/current/userguide/img/javaPluginTasks.png)",
        "",
        "The `java` plugin adds",
        "the [`java` extension](https://docs.gradle.org/current/dsl/org.gradle.api.plugins.JavaPluginExtension.html) to the",
        "project. This allows to configure a number of Java related properties, such as the version of Java to be used. Similar",
        "to the Gradle wrapper, this ensures that the same Java version is used irrespective from where the project is compiled.",
        "",
        "Let's set Oracle's Java 17 as our version of Java.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "e7519880-04f6-4d98-ad5f-bd16f57fad27",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 075ba3d..336da42 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,3 +1,10 @@",
        " plugins {",
        "     id 'java'",
        " }",
        "+",
        "+java {",
        "+    toolchain {",
        "+        languageVersion = JavaLanguageVersion.of(17)",
        "+        vendor = JvmVendorSpec.ORACLE",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "question",
      "id": "e44039ef-e61c-49de-b955-4527d8179186",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "What happens if that version of Java is not installed?",
        "",
        "Answer:6",
        "Gradle will download that particular version of Java and use it to run the tasks. Say that we have Java 8 installed, and",
        "we like to compile the code with Java 17. If we include",
        "the [`toolchain`](https://docs.gradle.org/current/userguide/toolchains.html), then Gradle will download the right",
        "version of Java first and then run the task. In other words, Java 17 is first downloaded and then Gradle uses this Java",
        "17 to compile the Java code, for example.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "343e786c-5e2d-4e1f-abab-e04ca9ff507a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:4",
        "What's the difference between",
        "the [`sourceCompatibility`](https://docs.gradle.org/current/dsl/org.gradle.api.plugins.JavaPluginExtension.html#org.gradle.api.plugins.JavaPluginExtension:sourceCompatibility)",
        "and the `toolchain`?",
        "",
        "Answer:16",
        "In the previous version of Gradle, we used the following approach to set the version of Java to be used.",
        "",
        "```",
        "java {",
        "    sourceCompatibility = JavaVersion.VERSION_17",
        "    targetCompatibility = JavaVersion.VERSION_17",
        "}",
        "```",
        "",
        "This approach merely indicates what version we required, but stops there. If we have an older version of Java, Gradle",
        "will still try to run the task with the older version.",
        "",
        "The `toolchain` was added to Gradle to address this problem. Gradle detects what versions of Java are available locally",
        "and will download if it does not already exist. Furthermore, this ensures that the project is compiled with the same",
        "version of Java irrespective from where this is executed, be it the developer's laptops' or the pipeline.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "82277079-da06-4ffe-a7ed-8b78f9995dba",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Maven has introduces",
        "a [directory structure for Java projects](https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html)",
        "and Gradle kept the same structure. We can change this using the `sourceSet` configuration, but it's best if you don't",
        "change it. Other developers have grown custom to this directory structure and changing it may make it harder for others",
        "to get used to your project. For example, the Java source file goes under the `src/main/java` directory and that's where",
        "programmers who are used to Maven and Gradle expect it to be.",
        "",
        "Let's create the required directory structure.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "4828617f-e984-434e-959a-bd5f69a78027",
      "workingDirectory": "single-java-project",
      "parameters": [
        "mkdir -p src/main/java",
        "mkdir -p src/main/resources",
        "mkdir -p src/test/java",
        "mkdir -p src/test/resources"
      ]
    },
    {
      "type": "markdown",
      "id": "40a568d6-cc5b-4ae3-9761-ba1334c0ad89",
      "workingDirectory": "single-java-project",
      "parameters": [
        "All our source files will go under the `src` director, including the tests. Other programming languages, like",
        "Javascript, use a different directory structure and separate the tests into a dedicated `test` root folder. The `src`",
        "directory has two subdirectories, the `main` and `test`. The production code goes in the `main` while the test code goes",
        "in the `test` directory.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "7e6b10f8-4021-4000-a451-8c1ff564a477",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Where would you put the integration tests?",
        "",
        "Answer:7",
        "While this depends on the team, it is a good practice to separate these tests into their own directory, such",
        "as `integrationTest`. You can set up",
        "this [manually](https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests) or",
        "use a plugin, such as the [Gradle TestSets plugin](https://github.com/unbroken-dome/gradle-testsets-plugin).",
        "Alternatively you can use the",
        "new [`testing` extension](https://docs.gradle.org/current/dsl/org.gradle.testing.base.TestingExtension.html).",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "64d367ff-5597-450f-82e2-47359a5b21f6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's explore the `src` directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "30c7f8a1-6065-4933-b0af-b164ac3ca563",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree src"
      ]
    },
    {
      "type": "markdown",
      "id": "5a1476c3-7182-4d02-bbaf-b49513a1b95f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `src` directory should have the following directory structure.",
        "",
        "```",
        "src",
        "|-- main",
        "|   |-- java",
        "|   `-- resources",
        "`-- test",
        "    |-- java",
        "    `-- resources",
        "",
        "6 directories, 0 files",
        "```",
        "",
        "We will create a simple class called `Main.java` (unoriginal, I know) and will put this in a package (directory)",
        "named `gbc`, short for _**G**radle **B**oot **C**amp_. We will start by creating a new directory named `gbc` within",
        "the `src/main/java`.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "cf4d585b-64e1-47d9-9cd0-16ee2a153afa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "mkdir src/main/java/gbc"
      ]
    },
    {
      "type": "markdown",
      "id": "4f24692b-31d7-4758-95be-e68f9a7be616",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the `Main.java` source file in this directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "1e280391-049e-471d-99ab-d3607ba48ec3",
      "workingDirectory": "single-java-project",
      "parameters": [
        "touch src/main/java/gbc/Main.java"
      ]
    },
    {
      "type": "markdown",
      "id": "0fe3ae9b-4c13-406a-87f6-4ec20630fddf",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's define the class and create the _main_ method.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "f9df87c7-8d71-47c5-bb51-f067a2f9fc7c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/main/java/gbc/Main.java b/src/main/java/gbc/Main.java",
        "index e69de29..12cd63c 100644",
        "--- a/src/main/java/gbc/Main.java",
        "+++ b/src/main/java/gbc/Main.java",
        "@@ -0,0 +1,7 @@",
        "+package gbc;",
        "+",
        "+public class Main {",
        "+    public static void main(final String[] args) {",
        "+        System.out.println(\"Gradle boot camp\");",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "df21fed1-ee0c-4a3a-8357-33fd8dd3ba6b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "In the attempt to be a bit different, we are printing `Gradle boot camp` to the standard output rather than the",
        "traditional `Hello world!!`.",
        "",
        "Now that we are all set, let's compile our application. We can use the `compileJava` task or the `assemble` task or",
        "the `build` task. The latter runs everything for us, and it is quite convenient as it will also run the tests if we had",
        "any.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d374306f-2ce9-4dc9-8828-6d1c6b199d54",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew build"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "05b7ea5d-ca53-4255-89e1-2e1813588710",
      "workingDirectory": "single-java-project",
      "parameters": [
        "When we run the `build` task, the Java source files are compiled by the `compileJava` task. The compiled Java classes",
        "are saved under the `build\\classes` directory. The `build` directory is Gradle's default output directory where all the",
        "build artefacts are stored. Let's see what's inside this directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "4abb6059-0159-4c93-b477-8fc31f25d75a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree build"
      ]
    },
    {
      "type": "markdown",
      "id": "8a8ca2ca-adc6-4e3d-a4f7-49871dd5f0fa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The build directory contains several other subdirectories, as shown next.",
        "",
        "```",
        "build",
        "|-- classes",
        "|   `-- java",
        "|       `-- main",
        "|           `-- gbc",
        "|               `-- Main.class",
        "|-- generated",
        "|   `-- sources",
        "|       |-- annotationProcessor",
        "|       |   `-- java",
        "|       |       `-- main",
        "|       `-- headers",
        "|           `-- java",
        "|               `-- main",
        "|-- libs",
        "|   `-- single-java-project.jar",
        "`-- tmp",
        "    |-- compileJava",
        "    |   `-- previous-compilation-data.bin",
        "    `-- jar",
        "        `-- MANIFEST.MF",
        "",
        "16 directories, 4 files",
        "```",
        "",
        "Our compiled classes go in the `classes` subdirectory, while",
        "the [Jar files](https://docs.oracle.com/en/java/javase/17/docs/specs/jar/jar.html) are saved under the `lib`",
        "subdirectory.",
        "",
        "Let's run our application using Java, and not Gradle.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2083de35-8539-4c58-a2cd-9b8309f2fd97",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -cp 'build/classes/java/main' gbc.Main"
      ]
    },
    {
      "type": "markdown",
      "id": "952e9f0f-d2b3-4777-bf82-8f02d1977cf2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "We need to make use of the `-cp` argument to set the classpath and point this to the `main` directory and not the",
        "package. Please refer to",
        "the [Standard Options for Java](https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#standard-options-for-java)",
        "section for a complete list of available options. Then we need specify the full qualified name of the class, which",
        "comprise its package and the class name, `gbc.Main`.",
        "",
        "This should print out our message to the standard output (also referred to the terminal or console).",
        "",
        "```",
        "Gradle boot camp",
        "```",
        "",
        "The Gradle `build` task also invoked the `assemble` task which in turn invokes",
        "the [`jar` task](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html). The `jar` task packages",
        "our application into a Jar file. Let's try running our application using the `-jar` argument.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d2ef5df8-8992-45dd-9ac7-888f8ac97962",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'"
      ],
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "c907ac88-795e-42e3-b78f-6b67c1c8e9a6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The command failed.",
        "",
        "```",
        "no main manifest attribute, in build/libs/single-java-project.jar",
        "```",
        "",
        "Java does not know which class to run, even if our application/Jar-file only contains one class. We need to specify",
        "the _main_ class.  We can use the `-cp` argument we used before.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "8229fc68-1679-48f9-8ddb-9c2f392199cd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -cp 'build/libs/single-java-project.jar' gbc.Main"
      ]
    },
    {
      "type": "markdown",
      "id": "8ba51dbc-afb9-4097-b069-121b71bf350d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This is equivalent to our first attempt to run the example, only this time we are pointing to a Jar file instead of a",
        "directory. This approach requires you to know what's inside the Jar file. You need to know where the _main_ method is. A",
        "better approach is to update the manifest file, `MANIFEST.MF`, and set the `Main-Class` attribute (or property).",
        "",
        "The `jar` Gradle task can be configured to do just that using",
        "the [`manifest`](https://docs.gradle.org/current/dsl/org.gradle.jvm.tasks.Jar.html#org.gradle.jvm.tasks.Jar:manifest)",
        "property.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "a2593296-359f-47c1-a5ce-6d7d4aab697e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 336da42..c8741d0 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -8,3 +8,9 @@ java {",
        "         vendor = JvmVendorSpec.ORACLE",
        "     }",
        " }",
        "+",
        "+tasks.named('jar') {",
        "+    manifest {",
        "+        attributes('Main-Class': 'gbc.Main')",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7134e720-e580-4de4-bb98-4696d0505a6a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Given that we only want to create the Jar file, we can simply run the `jar` Gradle task and not the entire build. Gradle",
        "is clever enough to only do what's needed and in this case it would probably take the same time to complete.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "c5c112b3-8252-4a65-beaf-9937709cdd32",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew jar"
      ]
    },
    {
      "type": "markdown",
      "id": "55ce1460-e63d-437c-8748-6aae9853aeae",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's try to run our Jar file, once more.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "f958f5f2-c65f-4df0-9ff8-70d900e63b09",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "db4e0066-6c4b-4254-8ab6-eba91d255070",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This time it works as Java can use the `MANIFEST.MD` file to determine the _main_ class and runs it.",
        "",
        "We now have created a simple Java application and used Gradle to compile it, set the Jar file's entry point and packaged",
        "everything into a single Jar file. Let's commit our progress before moving to the next section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "9f0416f8-70a5-4f4d-af8e-9ce381939873",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Add java plugin'"
      ]
    },
    {
      "type": "section",
      "id": "c990c43d-51be-486a-8ccf-f14b8eb83e84",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The application plugin"
      ]
    },
    {
      "type": "markdown",
      "id": "ec90336a-972f-47ad-8b34-918dc4fd748f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "So far we built and packaged our application using several Gradle tasks, such as `compileJava` and `jar`. But we did not",
        "run the application using Gradle, and instead we used Java for that. We can make use from another plugin,",
        "the [`application` plugin](https://docs.gradle.org/current/userguide/application_plugin.html), which provides additional",
        "tasks to the `java` plugin.",
        "",
        "Let's start by tagging the current state of the project, before proceeding.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "ddb88e98-551f-4acf-93db-af96a779bbfe",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v2' --message 'The application plugin'"
      ]
    },
    {
      "type": "markdown",
      "id": "c42faaa1-ead4-46a7-bf68-f748dc094a17",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `application` plugin extends the `java` plugin. We can replace the `java` plugin with the `application` plugin.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "7dff3a95-3a62-45e7-af51-41e1970c3533",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index c8741d0..201cc87 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,5 +1,5 @@",
        " plugins {",
        "-    id 'java'",
        "+    id 'application'",
        " }",
        " ",
        " java {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7e4d59a6-4cb5-406a-8a5a-d974a9031edc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `application` plugin",
        "adds [new tasks](https://docs.gradle.org/current/userguide/application_plugin.html#sec:application_tasks) to our",
        "project, such as the `run` task.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "f674f7cd-10fa-4d13-bfa5-2c342c1294ce",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew tasks"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "2a825c8b-809c-4d50-a876-5a74509ae059",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `run` task can be found under the _Application tasks_ group.",
        "",
        "```",
        "Application tasks",
        "-----------------",
        "run - Runs this project as a JVM application",
        "```",
        "",
        "Let's run our application using the `run` task.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "25725513-d483-4137-afbf-f477be7510d2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew run"
      ],
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "e52733b5-ad98-48aa-9d3d-79fa3b5983b3",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `run` task fails with a similar message we had before, when we tried to run the Jar file without setting",
        "the `Main-class` in the `MANIFEST.MD` file.",
        "",
        "```",
        "* What went wrong:",
        "Execution failed for task ':run'.",
        "> No main class specified and classpath is not an executable jar.",
        "```",
        "",
        "We need to configure the application and set",
        "the [`mainClass` property](https://docs.gradle.org/current/dsl/org.gradle.api.plugins.JavaApplication.html#org.gradle.api.plugins.JavaApplication:mainClass).",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "94ffcbc7-36f8-413c-8a36-14440c71137a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 201cc87..3214c64 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -9,6 +9,10 @@ java {",
        "     }",
        " }",
        " ",
        "+application {",
        "+    mainClass = 'gbc.Main'",
        "+}",
        "+",
        " tasks.named('jar') {",
        "     manifest {",
        "         attributes('Main-Class': 'gbc.Main')",
        ""
      ]
    },
    {
      "type": "question",
      "id": "5138b9bf-9667-4f93-967e-6c76a0ed7ddb",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Why are we configuring the `application` differently from the `jar`?",
        "",
        "Answer:14",
        "The `application` is a plugin while the `jar` is a task. We can use similar syntax to configure the `jar` tasks and",
        "many examples use the following syntax as it is less verbose.",
        "",
        "```",
        "jar {",
        "    manifest {",
        "        attributes('Main-Class': 'gbc.Main')",
        "    }",
        "}",
        "```",
        "",
        "While this works as expected, it loads the task eagerly. It is recommended to configure the tasks using a lazy",
        "configuration approach, such as `tasks.named('jar') { }`.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "c8818dbe-0bb0-4da3-afb6-b9bcc3b41ece",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0f7d96b1-0039-4c0b-81ee-bce4f472f2b4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew run"
      ]
    },
    {
      "type": "markdown",
      "id": "07fdd30a-2e49-49d8-b909-5e929419c954",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The Gradle `run` tasks works as expected.",
        "",
        "```",
        "> Task :run",
        "Gradle boot camp",
        "```",
        "",
        "Note that both the `jar` and the `application` are pointing to the same class, `gbc.Main`. The `jar` task can refer to",
        "the `application`'s `mainClass` instead, making it easier to maintain.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "e4a6e4e9-0b7d-44c3-b30a-d54eea81c4dc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 3214c64..093551e 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -15,6 +15,6 @@ application {",
        " ",
        " tasks.named('jar') {",
        "     manifest {",
        "-        attributes('Main-Class': 'gbc.Main')",
        "+        attributes('Main-Class': application.mainClass)",
        "     }",
        " }",
        ""
      ]
    },
    {
      "type": "question",
      "id": "1c42876d-6504-424f-abe8-27409b3a1651",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "What happens if the `application` is configured after the `jar`?",
        "",
        "Answer:38",
        "Consider the following, order.",
        "",
        "```",
        "tasks.named('jar') {",
        "    manifest {",
        "        attributes('Main-Class': application.mainClass)",
        "    }",
        "}",
        "",
        "application {",
        "    mainClass = 'gbc.Main'",
        "}",
        "```",
        "",
        "The `application.mainClass` is a property and not the value. Therefore, it will still work, even if we use the older",
        "approach to configure the `jar` task, as shown next.",
        "",
        "```",
        "jar {",
        "    manifest {",
        "        attributes('Main-Class': application.mainClass)",
        "    }",
        "}",
        "",
        "application {",
        "    mainClass = 'gbc.Main'",
        "}",
        "```",
        "",
        "Gradle evaluates the property at the latest point in time, when we execute the task. If on the other hand we retrieve",
        "the value, `application.mainClass.get()`, before this is set, then Gradle will fail to run.",
        "",
        "```",
        "* What went wrong:",
        "A problem occurred evaluating root project 'single-java-project'.",
        "> Cannot query the value of extension 'application' property 'mainClass' because it has no value available.",
        "```",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "c58341e4-374d-4d1f-bce3-a2f431a85951",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's re-create the Jar file again to make sure that all is working well.",
        "",
        "Ideally we capture this in a test and automate all the testing as much as possible, instead of trying things manually.",
        "We will cover testing later on and will introduce a test then.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "ece184da-0e5a-4ef4-a32b-c48fc846fc7e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew jar"
      ]
    },
    {
      "type": "markdown",
      "id": "fed0550f-9e9b-4224-b339-14ff58e8d5dd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application again, using the `java -jar` and not Gradle to make sure that the `MANIFEST.MD` file is",
        "properly set.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2428fcb1-55d2-4f3f-a741-4c0d6e85acc2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "24a9b458-0cb9-41b7-a121-d5a02ebe9a04",
      "workingDirectory": "single-java-project",
      "parameters": [
        "We are all set. We switched to the `application` plugin and configure the Jar file entry point. Let's commit our changes",
        "before moving on to the next section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "4b095c67-0283-4aa0-bd50-45e334cab395",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Use the application plugin'"
      ]
    },
    {
      "type": "section",
      "id": "c64f10ab-ca43-47f8-86e6-523fc9d60ae2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Dependencies"
      ]
    },
    {
      "type": "markdown",
      "id": "747e106b-81dc-4936-ac35-9181b85a6b53",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Applications use third-party dependencies, and so far we have not used any. In this section we will make use of the, ",
        "[infamous](https://en.wikipedia.org/wiki/Log4Shell), [log4j logging library](https://logging.apache.org/log4j/2.x/) to",
        "demonstrate further plugins.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "f4c847a4-489b-4268-8172-246d2450a6dd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v3' --message 'Dependencies'"
      ]
    },
    {
      "type": "markdown",
      "id": "d388d597-3aa8-4bc0-ba20-a80c43e1a397",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The [`java` plugin](https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management)",
        "adds a number",
        "of [dependency configurations](https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:what-are-dependency-configurations)",
        "to our project.",
        "",
        "Let's add an out-date version of log4j. Kindly note that this version of log4j has security vulnerabilities and should",
        "not be used.  We are using this version here for demonstration purposes, and it will be updated at a later stage.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "11a0a9ea-f215-4462-a954-1482cd2ba22e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 093551e..d4bb980 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -18,3 +18,7 @@ tasks.named('jar') {",
        "         attributes('Main-Class': application.mainClass)",
        "     }",
        " }",
        "+",
        "+dependencies {",
        "+    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "19bfd205-96ee-41dd-b1bb-ebd118cc4cc6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's build the application, using the Gradle `build` task.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "7011eb68-4e15-4314-aded-3fdf64661318",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew build"
      ],
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "031436e1-7453-4010-8e64-c4a3ba04909c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `build` task fails.",
        "",
        "```",
        "* What went wrong:",
        "Execution failed for task ':compileJava'.",
        "> Could not resolve all files for configuration ':compileClasspath'.",
        "   > Cannot resolve external dependency org.apache.logging.log4j:log4j-slf4j-impl:2.14.1 because no repositories are defined.",
        "```",
        "",
        "The message contains our solution. We have not configured the repositories from where Gradle can download these",
        "dependencies.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "801f7f7b-580a-4858-b6cb-8253647262be",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index d4bb980..47fe21e 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -19,6 +19,10 @@ tasks.named('jar') {",
        "     }",
        " }",
        " ",
        "+repositories {",
        "+    mavenCentral()",
        "+}",
        "+",
        " dependencies {",
        "     implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "382dc809-c325-47ac-87d6-c81a45854016",
      "workingDirectory": "single-java-project",
      "parameters": [
        "We instructed Gradle to use [Maven repository](https://mvnrepository.com/). We can have multiple repositories, including",
        "internal ones only accessible to the organisation we work for. This is quite a common practice where companies screen",
        "the dependencies and only allow the use of trusted dependencies.",
        "",
        "Let's build the project once more.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "6ea14355-719b-444a-9a24-f09aed6b483c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew build"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "b685ce35-8ab6-4c75-abde-dbf9e07ce36b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `build` task may take a bit longer to run as it needs to download the dependencies, if these do not already exist.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "6b7340b6-858f-421b-b1bf-dfaaf53e5db2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Where are the dependencies saved?",
        "",
        "Answer:10",
        "By default, Gradle saves the dependencies under the `~/.gradle/caches/modules-2` directory. You can check what's",
        "dependencies are downloaded using the following command.",
        "",
        "```",
        "ls -l ~/.gradle/caches/modules-2/files-2.1",
        "```",
        "",
        "Please note that this may produce a long list of dependencies, depending on how many dependencies you have",
        "already downloaded.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "e2efb82b-1f3b-4eae-8685-f54604f98b47",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's update our class to make sure of the logger instead of simply printing to the standard output.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "88226605-054d-4ff2-989a-002fe71d60b4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/main/java/gbc/Main.java b/src/main/java/gbc/Main.java",
        "index 12cd63c..7a005c0 100644",
        "--- a/src/main/java/gbc/Main.java",
        "+++ b/src/main/java/gbc/Main.java",
        "@@ -1,7 +1,13 @@",
        " package gbc;",
        " ",
        "+import org.slf4j.Logger;",
        "+import org.slf4j.LoggerFactory;",
        "+",
        " public class Main {",
        "+",
        "+    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);",
        "+",
        "     public static void main(final String[] args) {",
        "-        System.out.println(\"Gradle boot camp\");",
        "+        LOGGER.debug(\"Gradle boot camp\");",
        "     }",
        " }",
        ""
      ]
    },
    {
      "type": "question",
      "id": "8373c0dd-2267-4f0d-ab50-f0789d47f004",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "What is the difference between the [SLF4J](https://www.slf4j.org/) and the Log4J?",
        "",
        "Answer:9",
        "SLF4J is a logging [Façade](https://en.wikipedia.org/wiki/Facade_pattern), while Log4J is a logger. Instead of working",
        "directly with a logger, such as",
        "Log4J, [Java Logger](https://docs.oracle.com/en/java/javase/17/docs/api/java.logging/java/util/logging/Logger.html)",
        "or [logback](https://logback.qos.ch/) to name a few, we can use a façade and then configure the façade to pass all",
        "logging requests to a specific implementation, such as Log4J, Java Logger, or logback.",
        "",
        "The advantage of this approach is that our code becomes disconnected from the logging library, and we can switch from",
        "one implementation to the next without having to change our code.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "763d707b-873e-4d08-ad90-d9d15d5bd4fc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "49e5cd6a-a562-49bd-9895-9e61aced9719",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew run"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "b332c747-e91f-44e5-925b-4719b8e59759",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The application did not output anything to the standard output anymore. The following warnings may also appear instead.",
        "",
        "```",
        "> Task :run",
        "log4j:WARN Please initialize the log4j system properly.",
        "log4j:WARN No appenders could be found for logger (gbc.Main).",
        "log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.",
        "```",
        "",
        "We need to configure the logger such that it prints to the standard output. Each logger implementation has its own",
        "configuration. The new version of Log4J (referred to as _Log4J 2_) make use of",
        "the `src/main/resources/log4j2.properties` file. Let's start by creating this file.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "3ed7fbb9-a4b5-4dac-8bfa-b7880268594c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "touch 'src/main/resources/log4j2.properties'"
      ]
    },
    {
      "type": "question",
      "id": "4decdb55-1ae6-4901-86cb-1acf4dcb895a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "How come the `log4j2.properties` file was created under the `resources` directory?",
        "",
        "Answer:7",
        "The Java source file are expected to be placed under the `src/main/java` directory. If we have Kotlin source files,",
        "these are expected to be found under the `src/main/kotlin` directory. Properties files, like the `log4j2.properties`,",
        "are expected to be placed under the `src/main/resources` together with other files that are not source code, but are",
        "still required by the program.",
        "The [`processResources` task](https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_tasks), will copy",
        "these files and make them available with the rest of the compiled classes.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "bb3ed209-2b82-4418-859e-d30a2f7ab429",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's configure the Log4J so that it prints everything to the standard output.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "61a0e4fb-50b8-49ea-a13a-769ca4bc4594",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/main/resources/log4j2.properties b/src/main/resources/log4j2.properties",
        "index e69de29..ce302aa 100644",
        "--- a/src/main/resources/log4j2.properties",
        "+++ b/src/main/resources/log4j2.properties",
        "@@ -0,0 +1,10 @@",
        "+appenders=stdout",
        "+",
        "+appender.stdout.type = Console",
        "+appender.stdout.name = stdout",
        "+appender.stdout.layout.type = PatternLayout",
        "+appender.stdout.layout.pattern = [%d{dd-MMM-yyy HH:mm:ss:SSS}] [%p] [%c{1}:%L] - %m%n",
        "+",
        "+rootLogger.level = debug",
        "+rootLogger.appenderRefs = a",
        "+rootLogger.appenderRef.a.ref = stdout",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "d245efe6-6233-4526-a431-580e460f18aa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "41e59501-ad2c-422c-aa06-9dc1b422f423",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew run"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "9bad9952-08c1-40b8-8789-84af15a0c94f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Note that this time, our program printed the `Gradle boot camp` and included other (fancy) information.",
        "",
        "```",
        "> Task :run",
        "[27-Apr-2077 12:34:56:789] [DEBUG] [Main:10] - Gradle boot camp",
        "```",
        "",
        "This can be changed from the `src/main/resources/log4j2.properties` file.",
        "",
        "```",
        "appender.stdout.layout.pattern = [%d{dd-MMM-yyy HH:mm:ss:SSS}] [%p] [%c{1}:%L] - %m%n",
        "```",
        "",
        "This concludes are section about dependencies.  Let's commit our changes before heading to the next section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d195c2bb-2a4e-444f-b706-75ed93d3825f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Use logger instead of stdout'"
      ]
    },
    {
      "type": "section",
      "id": "ef6f1360-2730-496b-b377-39d37e81403c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The dependency check plugin"
      ]
    },
    {
      "type": "markdown",
      "id": "8870eb1f-fa36-4481-87cf-acfe0b749ae2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "In the previous section we used a vulnerable dependency on purpose, an old and vulnerable version of Log4J. In this",
        "section we will add a new Gradle plugin that helps us scan for such vulnerabilities.",
        "",
        "Let's tag our project so that we have a reference point.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "83fa7fef-54fd-4bdb-ab77-9b7c74617966",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v4' --message 'The dependency check plugin'"
      ]
    },
    {
      "type": "markdown",
      "id": "a56ba1ce-543a-4637-98b1-0c806da1452a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's add",
        "the [`org.owasp.dependencycheck`](https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html)",
        "(referred to as `dependency-check`) plugin.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "e70a83d0-bd32-4938-b286-5b7b8d60e4e0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 47fe21e..fc30f2d 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,5 +1,6 @@",
        " plugins {",
        "     id 'application'",
        "+    id 'org.owasp.dependencycheck' version '6.5.3'",
        " }",
        " ",
        " java {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "0117d668-0ef7-41b7-89eb-1a7cff840c37",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `dependency-check` plugin add new tasks to our Gradle project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "4ac6876a-6ad4-4997-83bc-4e9e6523141e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew tasks"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "f7ba8527-e8c8-45dd-af98-07667dead1db",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `dependency-check` plugin provides four new tasks, under the _OWASP dependency-check tasks_ group.",
        "",
        "```",
        "OWASP dependency-check tasks",
        "----------------------------",
        "dependencyCheckAggregate - Identifies and reports known vulnerabilities (CVEs) in multi-project dependencies.",
        "dependencyCheckAnalyze - Identifies and reports known vulnerabilities (CVEs) in project dependencies.",
        "dependencyCheckPurge - Purges the local cache of the NVD.",
        "dependencyCheckUpdate - Downloads and stores updates from the NVD CVE data feeds.",
        "```",
        "",
        "Let's run",
        "the [`dependencyCheckAnalyze` task](https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html).",
        "**Please note that this may take several minutes to run** as it needs to download the missing vulnerabilities' database.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "31a13efb-a466-4e23-85fb-46291ac89c92",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencyCheckAnalyze"
      ],
      "commandTimeout": 600.000000000
    },
    {
      "type": "markdown",
      "id": "e9e3fd32-d65e-4414-8eba-50ce30275768",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `dependencyCheckAnalyze` task will produce a report under the `build/reports` directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "a3852a80-4de2-4b3b-9ae1-24a5efb050e2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree build/reports"
      ]
    },
    {
      "type": "markdown",
      "id": "bee6dde9-0f2f-424d-ae00-63e32ada6bab",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `build/reports/dependency-check-report.html` contains a detailed and interactive description of the vulnerabilities found in our dependencies, including the transitive dependencies.",
        "",
        "```",
        "build/reports",
        "`-- dependency-check-report.html",
        "```",
        "",
        "We are using a vulnerable dependency on purpose, as indicated by the task's output.",
        "",
        "```",
        "One or more dependencies were identified with known vulnerabilities in single-java-project:",
        "",
        "log4j-api-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-api@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "log4j-core-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-core@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "log4j-slf4j-impl-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-slf4j-impl@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "```",
        "",
        "Let's run all tests, the `check` task, and see what happens given that we have vulnerable dependencies.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "a27d5c35-9ea1-411b-8532-e72c92ce9807",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "db6d78a8-d48a-4e10-b624-2faa738c8e5b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Unfortunately, the tests pass. We have a task that checks the dependencies, but this is not part of our tests. Let's add",
        "the `org.barfuin.gradle.taskinfo` plugin and see what tasks the `check` task depends on.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "efdb06f2-95db-4fb7-afb0-52b0b5230340",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index fc30f2d..d397ad8 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -1,6 +1,7 @@",
        " plugins {",
        "     id 'application'",
        "     id 'org.owasp.dependencycheck' version '6.5.3'",
        "+    id 'org.barfuin.gradle.taskinfo' version '1.3.1'",
        " }",
        " ",
        " java {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7226ae10-139f-437e-ba35-08ff247f0c69",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's see what tasks the `check` task depends on. In other words, when we run the `check` task, what other tasks are",
        "executed.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "00365d41-2920-4085-9b09-e524a5ffe449",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check tiTree"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "ace576be-78df-4663-b587-99fcdc54e46a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `check` task depends only on the `test` task.",
        "",
        "```",
        "> Task :tiTree",
        ":check                                     (org.gradle.api.DefaultTask)",
        "`--- :test                                 (org.gradle.api.tasks.testing.Test)",
        "     +--- :classes                         (org.gradle.api.DefaultTask)",
        "     |    +--- :compileJava                (org.gradle.api.tasks.compile.JavaCompile)",
        "     |    `--- :processResources           (org.gradle.language.jvm.tasks.ProcessResources)",
        "     `--- :testClasses                     (org.gradle.api.DefaultTask)",
        "          +--- :compileTestJava            (org.gradle.api.tasks.compile.JavaCompile)",
        "          |    `--- :classes               (org.gradle.api.DefaultTask)",
        "          |         +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "          |         `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "          `--- :processTestResources       (org.gradle.language.jvm.tasks.ProcessResources)",
        "```",
        "",
        "The dependency check is not part of the `check` task. We need to configure the `check` task and make it depends on",
        "the `dependencyCheckAnalyze` task so that when we run `check`, we run both the tests and the dependency check. Using",
        "vulnerable dependencies is a critical as having faulty code.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "adc6648d-4b4d-4b19-8f22-dafd7d0ccb7b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index d397ad8..c960256 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -28,3 +28,7 @@ repositories {",
        " dependencies {",
        "     implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        " }",
        "+",
        "+tasks.named('check') {",
        "+    dependsOn 'dependencyCheckAnalyze'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "dec7c4a9-9f9a-4ff7-b1c5-55d8ffbe11ed",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's print the dependency tree for the `check` task again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "bf4f8641-ca48-4328-945d-8fb5a0ee20cb",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check tiTree"
      ]
    },
    {
      "type": "markdown",
      "id": "51127ae6-59bf-49cc-ae21-6afbe6a82e96",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `check` task now depends on the `dependencyCheckAnalyze` too.",
        "",
        "```",
        "> Task :tiTree",
        ":check                                     (org.gradle.api.DefaultTask)",
        "+--- :dependencyCheckAnalyze               (org.owasp.dependencycheck.gradle.tasks.Analyze)",
        "`--- :test                                 (org.gradle.api.tasks.testing.Test)",
        "     +--- :classes                         (org.gradle.api.DefaultTask)",
        "     |    +--- :compileJava                (org.gradle.api.tasks.compile.JavaCompile)",
        "     |    `--- :processResources           (org.gradle.language.jvm.tasks.ProcessResources)",
        "     `--- :testClasses                     (org.gradle.api.DefaultTask)",
        "          +--- :compileTestJava            (org.gradle.api.tasks.compile.JavaCompile)",
        "          |    `--- :classes               (org.gradle.api.DefaultTask)",
        "          |         +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "          |         `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "          `--- :processTestResources       (org.gradle.language.jvm.tasks.ProcessResources)",
        "```",
        "",
        "Let's run the `check` tasks again. This will not run the `test` and the `dependencyCheckAnalyze` tasks.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d006175e-9dbf-48b1-8c11-8f774746bb7b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "d39293a4-2d71-44e5-8e0a-6bd1ccd36fdd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The project still make use of vulnerable dependencies",
        "",
        "```",
        "One or more dependencies were identified with known vulnerabilities in single-java-project:",
        "",
        "log4j-api-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-api@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "log4j-core-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-core@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "log4j-slf4j-impl-2.14.1.jar (pkg:maven/org.apache.logging.log4j/log4j-slf4j-impl@2.14.1, cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*) : CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105",
        "```",
        "",
        "Yes, the `check` tasks succeeds.",
        "",
        "```",
        "BUILD SUCCESSFUL in 11s",
        "3 actionable tasks: 3 executed",
        "```",
        "",
        "We need to [configure](https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html)",
        "the `dependencyCheckAnalyze` so that it fails if we have vulnerable dependencies. By default,",
        "the `dependencyCheckAnalyze` tasks does not fail.",
        "",
        "> Specifies if the build should be failed if a CVSS score equal to or above a specified level is identified. The default",
        "> is 11; since the CVSS scores are 0-10, by default the build will never fail. More information on CVSS scores can be",
        "> found at the NVD",
        "",
        "Let's set the `failBuildOnCVSS` property and set this",
        "to [9, fails for critical vulnerabilities only](https://nvd.nist.gov/vuln-metrics/cvss).",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "0849fc1d-bf95-4d26-9bf2-7f4b97ed84bb",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index c960256..ac38c69 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -32,3 +32,7 @@ dependencies {",
        " tasks.named('check') {",
        "     dependsOn 'dependencyCheckAnalyze'",
        " }",
        "+",
        "+dependencyCheck {",
        "+    failBuildOnCVSS = 9",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "d384f378-aabb-40fe-8f5e-b1bc0803abb2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run `check` again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "1b6c9e02-2c60-4abf-b497-f5ffb32f6317",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check"
      ],
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "b2083ab2-46e6-4f43-aa15-2bfb1fda9e72",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The task `dependencyCheckAnalyze` failed.",
        "",
        "```",
        "> Task :dependencyCheckAnalyze FAILED",
        "",
        "FAILURE: Build failed with an exception.",
        "",
        "* What went wrong:",
        "Execution failed for task ':dependencyCheckAnalyze'.",
        "> ",
        "  ",
        "  Dependency-Analyze Failure:",
        "  One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '9.0': CVE-2021-45046, CVE-2021-44228",
        "  See the dependency-check report for more details.",
        "```",
        "",
        "and with the `check` task",
        "",
        "```",
        "BUILD FAILED in 4s",
        "1 actionable task: 1 executed",
        "```",
        ""
      ]
    },
    {
      "type": "question",
      "id": "450f03be-ab66-4ef4-8a6b-2b8335aee3b7",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "How to investigate this problem?",
        "",
        "Answer:2",
        "We can run the `dependencies` task to check what dependencies are being used.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "7d4c8934-4b05-4425-81f5-8547cc423b18",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration compileClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "294de2e5-2e7a-4ca0-90cb-8fcf407221af",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The following three dependencies are used when the code is compiled.",
        "",
        "```",
        "compileClasspath - Compile classpath for source set 'main'.",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.14.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     \\--- org.apache.logging.log4j:log4j-api:2.14.1",
        "```",
        "",
        "We set the `--configuration` to `compileClasspath`. Now let's see what dependencies are used when we run the",
        "application.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "ae553361-5cf3-4374-ba23-0a38fb9027e7",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration runtimeClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "40fc02b0-0c2f-45d1-9e23-a1c250175cee",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Note that runtime make use of more dependencies.",
        "",
        "```",
        "runtimeClasspath - Runtime classpath of source set 'main'.",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.14.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     +--- org.apache.logging.log4j:log4j-api:2.14.1",
        "     \\--- org.apache.logging.log4j:log4j-core:2.14.1",
        "          \\--- org.apache.logging.log4j:log4j-api:2.14.1",
        "```",
        "  ",
        "",
        ""
      ]
    },
    {
      "type": "question",
      "id": "cdd3f2e3-21d7-4aa7-a027-9fdd34585085",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Why is this important?",
        "",
        "Answer:2",
        "The vulnerable dependency may be found in the runtime and not compile time.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "8f7ce3c8-9e33-4358-a551-70281d8b3b52",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `dependencyCheckAnalyze` indicated that the faulty dependency is `org.apache.logging.log4j/log4j-api`. Let's see",
        "what is pulling this dependency. In our dependencies, we only included",
        "the `org.apache.logging.log4j:log4j-slf4j-impl:2.14.1` dependency.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "7af1b1b4-c9c4-45ec-a323-a9c57940a86b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencyInsight --dependency org.apache.logging.log4j:log4j-api --configuration compileClasspath"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "231ac9da-f73f-441b-8bba-1bee18705768",
      "workingDirectory": "single-java-project",
      "parameters": [
        "In fact, this transitive dependency was pulled in by our dependency.",
        "",
        "```",
        "org.apache.logging.log4j:log4j-api:2.14.1",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.14.1",
        "     \\--- compileClasspath",
        "```",
        "",
        "The `dependencyInsight` task is quite useful to determine why a dependency ended up in our project.",
        "",
        "Let's set the version of the transitive dependency `org.apache.logging.log4j:log4j-api` to `2.17.1`.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "7830818e-6fab-4f72-8d0a-6a3daf1a6f39",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index ac38c69..fd737d9 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -26,6 +26,7 @@ repositories {",
        " }",
        " ",
        " dependencies {",
        "+    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'",
        "     implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        " }",
        " ",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "fd502603-5c51-4215-ac35-b9ee5a18b39a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Now we have two different versions of the same dependency, `2.14.1` and `2.17.1`. Let's check the dependencies again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "9dd13b73-14f1-4a76-b07a-51b6227462c4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration compileClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "dc26cf73-2e56-4ba1-a9d9-c771b92c9a06",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Both version are listed.",
        "",
        "```",
        "compileClasspath - Compile classpath for source set 'main'.",
        "+--- org.apache.logging.log4j:log4j-api:2.17.1",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.14.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     \\--- org.apache.logging.log4j:log4j-api:2.14.1 -> 2.17.1",
        "```",
        ""
      ]
    },
    {
      "type": "question",
      "id": "30ddabfd-1e80-4ef1-aa81-811761cba9aa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Which version will be used?",
        "",
        "Answer:6",
        "Gradle will always use the latest version as indicated by the `->`",
        "",
        "```",
        "     \\--- org.apache.logging.log4j:log4j-api:2.14.1 -> 2.17.1",
        "```",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "29a378d9-5f8a-42ae-94aa-3c2583b8b6fb",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Now let's change our version from `2.17.1` and `2.12.1`, which is less than the one pulled in by the `log4j-slf4j-impl` dependency.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "7b2f4305-5c43-4841-bfde-c44793a59ac2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index fd737d9..79ae6e6 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -26,7 +26,7 @@ repositories {",
        " }",
        " ",
        " dependencies {",
        "-    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'",
        "+    implementation 'org.apache.logging.log4j:log4j-api:2.12.1'",
        "     implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        " }",
        " ",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "4541438a-15a9-45ed-a892-f65bbafb52f9",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's check again and see which dependency is used.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "575f68b7-e1a8-420d-b9f4-4394ad38008e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration compileClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "25867a3d-3f4c-41be-895f-a79260cf9c4e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Note that Gradle will go for the latest version, even if this is a transitive dependency.",
        "",
        "```",
        "compileClasspath - Compile classpath for source set 'main'.",
        "+--- org.apache.logging.log4j:log4j-api:2.12.1 -> 2.14.1",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.14.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     \\--- org.apache.logging.log4j:log4j-api:2.14.1",
        "```",
        "",
        "In this case, version `2.14.1` is used and not the `2.12.1` we included.",
        "",
        "Let's head back the dependency problem and bump up the version of `org.apache.logging.log4j:log4j-slf4j-impl`",
        "dependency.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "128d3439-8830-4a9a-aa40-6553d6dda553",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 79ae6e6..c04016e 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -26,8 +26,7 @@ repositories {",
        " }",
        " ",
        " dependencies {",
        "-    implementation 'org.apache.logging.log4j:log4j-api:2.12.1'",
        "-    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'",
        "+    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.1'",
        " }",
        " ",
        " tasks.named('check') {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "b6e07dbe-60de-49d9-a1b6-0737a306db6d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the `check` task again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "17e13142-bae4-4953-873e-1f4d1ca5cca4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew check"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "18bc956f-96c3-48d0-983f-08fb6c090532",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `check` task finished successfully. The `dependencyCheckAnalyze` task ensures that our dependencies do not contain",
        "vulnerabilities. The `dependencyCheckAnalyze` can be triggered daily on a pipeline to make sure that projects that are",
        "not being actively developed do not contain vulnerable dependencies. Dedicated services,",
        "like [dependabot](https://github.com/dependabot), can be configured to do the same thing. These services can also be",
        "configured to create pull-requests to update to a safe version.",
        "",
        "This concludes this section. Let's commit our changes before moving on.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e3e09122-9c7b-44f7-99d3-7272f358f055",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Fix log4j vulnerability'"
      ]
    },
    {
      "type": "section",
      "id": "d29f3d2f-c868-4449-9ca5-f458def11eaf",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Version Control"
      ]
    },
    {
      "type": "todo",
      "id": "7bc36f8c-7f4d-48be-954b-bbec617e96be",
      "parameters": [
        "Talk about ",
        "",
        "- How to exclude transitive dependencies when these are not needed",
        "  ",
        "  ```",
        "  dependencies {",
        "    implementation ('group:module:version') {",
        "      exclude 'group:module'",
        "    }",
        "  }",
        "  ```",
        "  ",
        "- How to exclude transitive dependencies for a given configuration",
        "  ",
        "  ```",
        "  dependencies {",
        "    implementation 'group:module:version'",
        "    configurations.implementation {",
        "      exclude 'group:module'",
        "    }",
        "  }",
        "  ```",
        "  ",
        "- How to replace one dependency with another, for example logback with",
        "  log4j [as recommended by Spring](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.logging.log4j)",
        "  ",
        "  ```",
        "  dependencies {",
        "    implementation 'group:module:version'",
        "    modules {",
        "      module('group:module') {",
        "        replacedBy 'group:module', '(Optional) Reason'",
        "      }",
        "    }",
        "  }",
        "  ```",
        "  ",
        "- How to add a constraint to increase the version of a transitive dependency",
        "  ",
        "  ```",
        "  dependencies {",
        "    implementation 'group:module:version'",
        "    constraints {",
        "      implementation('group:module:version') {",
        "        because '(Optional) Reason'",
        "      }",
        "    }",
        "  }",
        "  ```",
        "  ",
        "  Note tat Gradle always picks the highest version.  So if the constraint is pointing to a lower version, then this is",
        "  ignored by Gradle.",
        ""
      ]
    },
    {
      "type": "section",
      "id": "33c1d390-23f4-44d6-9c8d-79232bafb7d9",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Testing"
      ]
    },
    {
      "type": "markdown",
      "id": "6977b9d1-75dc-4d04-b886-bad07d18f596",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The Gradle `java` plugin includes testing as part of its tasks. In this section we will see how to set up Gradle to test",
        "out code using the [JUnit testing framework](https://junit.org/junit5/). Gradle is not bound to one testing framework,",
        "and other testing frameworks, such as [spock](https://spockframework.org/) or [TestNG](https://testng.org/doc/), can be",
        "used with Gradle.",
        "",
        "Let's start by tagging the state of the project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "31df643b-5570-44c0-bc6a-936aba231f8d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v5' --message 'Testing'"
      ]
    },
    {
      "type": "markdown",
      "id": "0c4cbe95-f64a-47f8-ad8a-54f286b545d6",
      "parameters": [
        "Let's configure Gradle to use JUnit 5 testing framework.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "a5c31ae5-9e8f-40b0-b54f-2147a41c3c83",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index c04016e..286ece7 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -21,6 +21,14 @@ tasks.named('jar') {",
        "     }",
        " }",
        " ",
        "+testing {",
        "+    suites {",
        "+        test {",
        "+            useJUnitJupiter('5.8.2')",
        "+        }",
        "+    }",
        "+}",
        "+",
        " repositories {",
        "     mavenCentral()",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "285be319-a2ac-44e7-a669-5ac383c4934a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Gradle is starting to support different testing suites out of the box, as experimental feature. Alternatively, we can",
        "use plugins like the [Gradle TestSets plugin](https://github.com/unbroken-dome/gradle-testsets-plugin), or configure it",
        "manually.",
        "",
        "Let's see what dependencies are added to the `runtimeClasspath`.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "223ffb31-7182-44d0-906c-690a8d9f098a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration runtimeClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "8692db8c-8434-48a8-9f8d-6553c85deec3",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `runtimeClasspath` has not changed, as expected.",
        "",
        "```",
        "runtimeClasspath - Runtime classpath of source set 'main'.",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.17.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     +--- org.apache.logging.log4j:log4j-api:2.17.1",
        "     \\--- org.apache.logging.log4j:log4j-core:2.17.1",
        "          \\--- org.apache.logging.log4j:log4j-api:2.17.1",
        "```",
        "",
        "Testing dependencies should not be available to the runtime, as these are only meant to be used during testing. Let's",
        "see what dependencies are added to the `testRuntimeClasspath `.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "c965762c-9b9c-4b11-99d4-e8da6b1fa23c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration testRuntimeClasspath"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "d49b2210-4710-488e-9632-a6de323e1880",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This time we have many more dependencies, mainly related to JUnit.",
        "",
        "```",
        "testRuntimeClasspath - Runtime classpath of source set 'test'.",
        "+--- org.apache.logging.log4j:log4j-slf4j-impl:2.17.1",
        "|    +--- org.slf4j:slf4j-api:1.7.25",
        "|    +--- org.apache.logging.log4j:log4j-api:2.17.1",
        "|    \\--- org.apache.logging.log4j:log4j-core:2.17.1",
        "|         \\--- org.apache.logging.log4j:log4j-api:2.17.1",
        "\\--- org.junit.jupiter:junit-jupiter:5.8.2",
        "     +--- org.junit:junit-bom:5.8.2",
        "     |    +--- org.junit.jupiter:junit-jupiter:5.8.2 (c)",
        "     |    +--- org.junit.jupiter:junit-jupiter-api:5.8.2 (c)",
        "     |    +--- org.junit.jupiter:junit-jupiter-engine:5.8.2 (c)",
        "     |    +--- org.junit.jupiter:junit-jupiter-params:5.8.2 (c)",
        "     |    +--- org.junit.platform:junit-platform-commons:1.8.2 (c)",
        "     |    \\--- org.junit.platform:junit-platform-engine:1.8.2 (c)",
        "     +--- org.junit.jupiter:junit-jupiter-api:5.8.2",
        "     |    +--- org.junit:junit-bom:5.8.2 (*)",
        "     |    +--- org.opentest4j:opentest4j:1.2.0",
        "     |    \\--- org.junit.platform:junit-platform-commons:1.8.2",
        "     |         \\--- org.junit:junit-bom:5.8.2 (*)",
        "     +--- org.junit.jupiter:junit-jupiter-params:5.8.2",
        "     |    +--- org.junit:junit-bom:5.8.2 (*)",
        "     |    \\--- org.junit.jupiter:junit-jupiter-api:5.8.2 (*)",
        "     \\--- org.junit.jupiter:junit-jupiter-engine:5.8.2",
        "          +--- org.junit:junit-bom:5.8.2 (*)",
        "          +--- org.junit.platform:junit-platform-engine:1.8.2",
        "          |    +--- org.junit:junit-bom:5.8.2 (*)",
        "          |    +--- org.opentest4j:opentest4j:1.2.0",
        "          |    \\--- org.junit.platform:junit-platform-commons:1.8.2 (*)",
        "          \\--- org.junit.jupiter:junit-jupiter-api:5.8.2 (*)",
        "",
        "(c) - dependency constraint",
        "(*) - dependencies omitted (listed previously)",
        "```",
        "",
        "Our test code, code under the `src/test` directory, will have access to all the above dependencies.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "d16078e8-9fe0-4f39-bf9a-d68104775023",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Can we use JUnit from within our `Main.java` class?",
        "",
        "Answer:4",
        "Not with the current setup. Gradle is able to partition the environments. Code that is found under the `src/main`",
        "directory has access to the `compileClasspath` when this is compiled. When we run the code, always under the `src/main`",
        "directory, Gradle makes available all dependencies under the `runtimeClasspath`.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "16a31550-c1af-46ca-aefb-4f9403d2fdf6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the package named `gbc` where we will put our test class.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "595d8666-e3d8-4fed-a051-49bd755ac7e5",
      "workingDirectory": "single-java-project",
      "parameters": [
        "mkdir 'src/test/java/gbc'"
      ]
    },
    {
      "type": "markdown",
      "id": "2b52de0a-e60a-4a61-8b97-406a2185ab68",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the test class next. We will be testing our single class, named `Main.java`. Usually the test class is",
        "named, `MainTest.java`, to easily relate to the class it is being tested. This is convention, while popular, is not",
        "always followed and there are good reasons to break it. While this is an interesting topic, it is best to be left for",
        "another day.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d75503fa-88b8-470f-a496-5aa666a2a45d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "touch 'src/test/java/gbc/MainTest.java'"
      ]
    },
    {
      "type": "markdown",
      "id": "cd7310be-737e-4bc6-8e80-1d38102bd998",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the class, with an empty body for now.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "2d5c1186-3969-41ff-b49c-edd563c92906",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/test/java/gbc/MainTest.java b/src/test/java/gbc/MainTest.java",
        "index e69de29..4d818d3 100644",
        "--- a/src/test/java/gbc/MainTest.java",
        "+++ b/src/test/java/gbc/MainTest.java",
        "@@ -0,0 +1,5 @@",
        "+package gbc;",
        "+",
        "+class MainTest {",
        "+",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "8b91469a-c919-4dc4-b8ea-13b6b225e432",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The _main_ method simply logs something to the standard output. To test this class, we need to capture the standard",
        "output and then verify that it contains the text `Gradle boot camp`.",
        "",
        "Let's start with a method that does just that.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "a255c286-54d2-48cb-bd5a-bbf5dad4b94e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/test/java/gbc/MainTest.java b/src/test/java/gbc/MainTest.java",
        "index 4d818d3..76bc06a 100644",
        "--- a/src/test/java/gbc/MainTest.java",
        "+++ b/src/test/java/gbc/MainTest.java",
        "@@ -1,5 +1,24 @@",
        " package gbc;",
        " ",
        "+import java.io.ByteArrayOutputStream;",
        "+import java.io.PrintStream;",
        "+import java.nio.charset.StandardCharsets;",
        "+",
        "+import static org.junit.jupiter.api.Assertions.assertNotNull;",
        "+",
        " class MainTest {",
        " ",
        "+    private static String runAndCaptureStandardOut(final Runnable task) {",
        "+        assertNotNull(task);",
        "+",
        "+        final PrintStream original = System.out;",
        "+        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
        "+        try (PrintStream out = new PrintStream(buffer)) {",
        "+            System.setOut(out);",
        "+            task.run();",
        "+        } finally {",
        "+            System.setOut(original);",
        "+        }",
        "+        return buffer.toString(StandardCharsets.UTF_8);",
        "+    }",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "44fad765-7702-47ee-9171-09b11a830c96",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This method is generic. It takes",
        "a [`Runnable`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Runnable.html), temporary swap the",
        "standard output, capture whatever is printed to the standard output, returns it as string and the swap the original",
        "standard output back so that other things are not effected by this.",
        "",
        "With the boilerplate out of the way, let's turn our attention to our test.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "ec28792b-d26a-4a6a-8aa6-c338c00f9453",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/test/java/gbc/MainTest.java b/src/test/java/gbc/MainTest.java",
        "index 76bc06a..5e26577 100644",
        "--- a/src/test/java/gbc/MainTest.java",
        "+++ b/src/test/java/gbc/MainTest.java",
        "@@ -1,13 +1,28 @@",
        " package gbc;",
        " ",
        "+import org.junit.jupiter.api.Test;",
        "+",
        " import java.io.ByteArrayOutputStream;",
        " import java.io.PrintStream;",
        " import java.nio.charset.StandardCharsets;",
        " ",
        " import static org.junit.jupiter.api.Assertions.assertNotNull;",
        "+import static org.junit.jupiter.api.Assertions.assertTrue;",
        " ",
        " class MainTest {",
        " ",
        "+    @Test",
        "+    void runsTheApplication() {",
        "+        /* Given */",
        "+        final Runnable task = () -> Main.main(new String[]{});",
        "+",
        "+        /* When */",
        "+        final String stdOut = runAndCaptureStandardOut(task);",
        "+",
        "+        /* Then */",
        "+        assertTrue(stdOut.contains(\"Gradle Boot Camp\"));",
        "+    }",
        "+",
        "     private static String runAndCaptureStandardOut(final Runnable task) {",
        "         assertNotNull(task);",
        " ",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "ee0f14aa-ca3c-47de-a50c-e7be347415a1",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Here we are invoking the _main_ method programmatically and passing an empty array as its argument.",
        "",
        "Let's run the test.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "21c25452-3012-4cd6-b175-2afae82ca875",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew test"
      ],
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "1b742d19-4a00-4117-b4ef-4bc7c54fcbc4",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The test failed.",
        "",
        "```",
        "> Task :test FAILED",
        "",
        "MainTest > runsTheApplication() FAILED",
        "    org.opentest4j.AssertionFailedError at MainTest.java:23",
        "```",
        "",
        "The output shown is not very helpful as we are asserting that the expression `stdOut.contains(\"Gradle Boot Camp\")`",
        "evaluates to `true`.",
        "",
        "```",
        "org.opentest4j.AssertionFailedError: expected: <true> but was: <false>",
        "\tat org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)",
        "\tat org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)",
        "\tat org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:35)",
        "\tat org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:179)",
        "\tat gbc.MainTest.runsTheApplication(MainTest.java:23)",
        "```",
        "",
        "The [assertj](https://assertj.github.io/doc/) library provides additional assertions that make such comparisons easier",
        "and produce better results.",
        "",
        "The test fails as we are expecting `Gradle Boot Camp`, while we have `Gradle boot camp`. Let's update our code to match",
        "the expectation.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "05002157-de94-4bdd-8c5e-9b3740b06c78",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/main/java/gbc/Main.java b/src/main/java/gbc/Main.java",
        "index 7a005c0..612af98 100644",
        "--- a/src/main/java/gbc/Main.java",
        "+++ b/src/main/java/gbc/Main.java",
        "@@ -7,7 +7,7 @@ public class Main {",
        " ",
        "     private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);",
        " ",
        "     public static void main(final String[] args) {",
        "-        LOGGER.debug(\"Gradle boot camp\");",
        "+        LOGGER.debug(\"Gradle Boot Camp\");",
        "     }",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "473140e1-7099-4f40-a4d5-96ef88700ebd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the tests again."
      ]
    },
    {
      "type": "command",
      "id": "7bc5ede5-60c2-44ea-aa52-c5225a40c46d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew test"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "5cf03158-4628-4489-9e8e-5a4067fc5a8e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This time the tests worked.",
        "",
        "Let's commit our changes before moving to the next section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0227f666-2b57-4e04-ac1b-ac34b7274dae",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Add JUnit'"
      ]
    },
    {
      "type": "section",
      "id": "7a0a2fd9-2083-4567-b906-743253bc2428",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Package the application"
      ]
    },
    {
      "type": "markdown",
      "id": "9005b7cc-6982-4dda-9ed3-7b7781457017",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Our application is ready to be packaged and shipped for use.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "bda73e53-e442-4a58-989d-1344cd665277",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v6' --message 'Package the application'"
      ]
    },
    {
      "type": "markdown",
      "id": "807d9b7c-0e00-46de-8fbb-a95a70dd3f56",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's start by creating the Jar file, using the `jar` Gradle task.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "83b45038-25e2-4c66-8cc3-a19d5014f76d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew jar"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "8b921a5a-ef92-444d-8aee-c03fbb822a0e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This will package our application into a Jar file and save it under the `build/libs` directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "ae958560-390c-4004-9e82-efb8de5f2330",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree 'build/libs'"
      ]
    },
    {
      "type": "markdown",
      "id": "4ab1967b-4570-4b52-9e12-82a494e95dcc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The Jar file, takes the name of the project, `single-java-project` in this case.",
        "",
        "```",
        "build/libs",
        "`-- single-java-project.jar",
        "```",
        "",
        "We didn't specify this anywhere. If we do not set the project name in the `settings.gradle` file, then the project",
        "directory name is used as the project name. This can vary as the project can be checked out into a directory with a",
        "different name. That means that Gradle's task may produce a different output based on things that are not part of",
        "version control. That's why it is important specify the project name in the `settings.gradle` file. Other plugins and",
        "tasks rely on this as a sensible default. Alternatively we need to specify the name everywhere it is used.",
        "",
        "Let's run the Jar file.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "53b60e96-59ad-45d0-91bf-04dd11486979",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'",
        ""
      ],
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "02b7d789-4e07-427e-9644-5708276a5962",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This failed.",
        "",
        "```",
        "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/slf4j/LoggerFactory",
        "\tat gbc.Main.<clinit>(Main.java:8)",
        "Caused by: java.lang.ClassNotFoundException: org.slf4j.LoggerFactory",
        "\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)",
        "\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)",
        "\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)",
        "\t... 1 more",
        "```",
        "",
        "It seems that we are missing the SLF4J libraries. Let's examine the contents of the Jar file.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "7327e6c9-4880-4df7-bf14-723c912d6293",
      "workingDirectory": "single-java-project",
      "parameters": [
        "jar tf 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "afeca4ad-7e36-4ea8-a7ca-9e5594f8936c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The Jar file only contains our code and the `MANIFEST.MF` file that the Gradle `jar` task created.",
        "",
        "```",
        "META-INF/",
        "META-INF/MANIFEST.MF",
        "gbc/",
        "gbc/Main.class",
        "log4j2.properties",
        "```",
        "",
        "We are definitely missing the runtime dependencies. Let's list the expected runtime dependencies.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "47fbfe7c-f6e7-4d9c-8425-500d675a0ae7",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew dependencies --configuration runtimeClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "41f1436b-9c7e-4512-a4b3-bd135f522303",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Together to our code, we should have these other four dependencies.",
        "",
        "```",
        "runtimeClasspath - Runtime classpath of source set 'main'.",
        "\\--- org.apache.logging.log4j:log4j-slf4j-impl:2.17.1",
        "     +--- org.slf4j:slf4j-api:1.7.25",
        "     +--- org.apache.logging.log4j:log4j-api:2.17.1",
        "     \\--- org.apache.logging.log4j:log4j-core:2.17.1",
        "          \\--- org.apache.logging.log4j:log4j-api:2.17.1",
        "```",
        "",
        "We have an issue and our tests are not covering us from this issue. The tests we have so far are called _unit tests_ and",
        "these are executed against methods and do not interact with other things outside the current process. When we test",
        "methods that need to interact with the outside world, such as databases or a third party service, we use a different set",
        "of tests, called _integration tests_. In our case, we need to run the application like we are doing from the command",
        "line and make sure that it works. We need to write a different type of test, one that runs against the application as a",
        "whole. These kinds of tests are referred to as _functional tests_ where the application is seen as a closed box (don't",
        "know what's inside) and we interact with it as a user does.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "36f4d4ae-14a2-49c2-b33d-b7d99cd890b0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Why do we need to distinguish between these different types of tests?",
        "",
        "Answer:17",
        "_Unit tests_, tend to be quick and provide quick feedback. Generally, these take milliseconds to run.",
        "",
        "_Integration tests_, need to interact with other processed and make intra-process, or worse/slower inter-process,",
        "communication. These tests may take seconds instead of milliseconds to run, making them slower. Therefore, we tend to",
        "have less of the _integration test_ and more of the _unit tests_.",
        "",
        "_Functional tests_ simulate user behaviour. Similar to _integration tests_, during the _functional tests_ the",
        "application interacts with other processes and make intra-process, or worse/slower inter-process, communication.",
        "Furthermore, _functional tests_ cover a user journey from start to end. Each test may require a couple of seconds to",
        "complete, making it the slowest type of test.",
        "",
        "Separating the tests, allows use to run each group separately. While developing, we can run the _unit tests_ as often as",
        "we need and obtain very quick feedback. We don't need to interact with other processes and don't need to have any other",
        "things running (like a database or other services) for the _unit tests_ to work. Before pushing the changes to the",
        "remote repository, we run all tests (_unit tests_, _integration tests_ and _functional tests_) to make sure that all is",
        "well before pushing.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7280b53f-02f9-4c86-851d-a7b4ff1c9048",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create a new test suite, called `functionalTest`. Will will make sure that our application runs properly from the",
        "command line.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "08ea92e7-7cec-482c-9a07-eb69ea4dcb65",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 74a95dd..4de756c 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -31,6 +31,23 @@ testing {",
        "         test {",
        "             useJUnitJupiter('5.8.2')",
        "         }",
        "+",
        "+        functionalTest(JvmTestSuite) {",
        "+            dependencies {",
        "+                implementation project",
        "+            }",
        "+",
        "+            useJUnitJupiter('5.8.2')",
        "+",
        "+            targets {",
        "+                all {",
        "+                    testTask.configure {",
        "+                        shouldRunAfter test",
        "+                        dependsOn assemble",
        "+                    }",
        "+                }",
        "+            }",
        "+        }",
        "     }",
        " }",
        " ",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "130ffb08-76e1-491a-b4ae-2f0779919270",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `functionalTest`, being slower, should run after the `test`, where our quick unit tests are. If the unit test fail,",
        "then there is no need to run the slower functional tests (fast feedback). Different form the unit test, the functional",
        "test need the application. By separating these types of tests, we can make the functional tests depend on the `assemble`",
        "task.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "eb1710b7-2984-4bf5-bf13-adc8580277bf",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Why do we need to depend on the `assemble` task and not the `jar` task?",
        "",
        "Answer:4",
        "There are many ways to create a Jar file. We can create our custom task that does that or use a third party library.",
        "The `assemble` task will depend on the tasks that create Jar file. By depending on the `assemble` we become",
        "implementation independent.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "c89074b1-64df-4ccd-83de-4fd9180e600b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the `functionalTest` directories.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0cfaae63-81f2-44fe-9ab2-1fa6fabbcb19",
      "workingDirectory": "single-java-project",
      "parameters": [
        "mkdir -p 'src/functionalTest/java'",
        "mkdir -p 'src/functionalTest/resources'"
      ]
    },
    {
      "type": "markdown",
      "id": "a707b468-a172-4727-8cd0-ce66ed7238ed",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's add the `gbc` package (directory).",
        ""
      ]
    },
    {
      "type": "command",
      "id": "749b2d66-7bb7-4772-8601-6a9dff0adcf6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "mkdir 'src/functionalTest/java/gbc'"
      ]
    },
    {
      "type": "markdown",
      "id": "3f9b224b-68ed-48ef-b108-ffcc5775f064",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the functional test that will run the application using the command",
        "",
        "```",
        "java -jar build/libs/single-java-project.jar",
        "```",
        "",
        "Java provides",
        "the [`ProcessBuilder`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ProcessBuilder.html) and",
        "the [`Process`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Process.html) classes to run a",
        "command. We can use these to run our application and make sure it finishes without errors. We can use",
        "the [exit status](https://en.wikipedia.org/wiki/Exit_status) to determine whether the application ran successfully or",
        "failed. An exit status of `0` indicates that the application finished without errors.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "65884160-875d-4fdb-95cf-5beb4dd3d85c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "touch 'src/functionalTest/java/gbc/RunApplicationTest.java'"
      ]
    },
    {
      "type": "markdown",
      "id": "323fc1b7-ef28-4e08-9895-02da157cbfc2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application from our functional test and determine whether it finished successfully or not.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "b709fa8d-a9f7-41ad-922c-a8d2e83eef52",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Am I correct to understand that we are running a Java application from within another Java application?",
        "",
        "Answer:4",
        "Yes, our function test is running a command, which happens to be another Java application. This is irrelevant as all we",
        "care about in this functional test is that the command finishes executing in five seconds and that it finishes without",
        "errors (exit status 0). We can use this example for any other type of application.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "77c232b9-725a-4dc7-b62c-dea462671057",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/src/functionalTest/java/gbc/RunApplicationTest.java b/src/functionalTest/java/gbc/RunApplicationTest.java",
        "index e69de29..d18c607 100644",
        "--- a/src/functionalTest/java/gbc/RunApplicationTest.java",
        "+++ b/src/functionalTest/java/gbc/RunApplicationTest.java",
        "@@ -0,0 +1,32 @@",
        "+package gbc;",
        "+",
        "+import org.junit.jupiter.api.Test;",
        "+",
        "+import java.io.IOException;",
        "+import java.util.concurrent.TimeUnit;",
        "+",
        "+import static org.junit.jupiter.api.Assertions.assertEquals;",
        "+import static org.junit.jupiter.api.Assertions.fail;",
        "+",
        "+public class RunApplicationTest {",
        "+",
        "+    @Test",
        "+    void runApplication() throws IOException, InterruptedException {",
        "+        /* Given */",
        "+        final String[] command = {\"java\", \"-jar\", \"build/libs/single-java-project.jar\"};",
        "+",
        "+        /* When */",
        "+        final ProcessBuilder builder = new ProcessBuilder(command);",
        "+        final Process process = builder.start();",
        "+        final boolean finishedInTime = process.waitFor(5, TimeUnit.SECONDS);",
        "+",
        "+        /* Then */",
        "+        if (!finishedInTime) {",
        "+            process.destroyForcibly();",
        "+            fail(\"Process took longer than expected to complete\");",
        "+        }",
        "+",
        "+        final int exitValue = process.exitValue();",
        "+        assertEquals(0, exitValue);",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "57a8718c-93c3-4d6e-afb3-165c8a9bbaf6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the functional tests only.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2339cc47-9ab2-417c-b26f-df879a1349d0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew functionalTest"
      ],
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "14355af8-2aa5-451b-a60b-f6f40820cd6a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The functional test, failed as expected.",
        "",
        "```",
        "> Task :functionalTest FAILED",
        "RunApplicationTest > runApplication() FAILED",
        "    org.opentest4j.AssertionFailedError at RunApplicationTest.java:30",
        "```",
        "",
        "With the test complete, let's update the `jar` task configuration such that it includes the runtime dependencies.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "fdf1042f-d8a8-4ab4-b295-b1d184b83b41",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index b854e85..f7f9753 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -19,6 +19,10 @@ tasks.named('jar') {",
        "     manifest {",
        "         attributes('Main-Class': application.mainClass)",
        "     }",
        "+    from {",
        "+        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }",
        "+    }",
        "+    duplicatesStrategy = 'exclude'",
        " }",
        " ",
        " testing {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "f559e24e-d0e8-4d10-8b18-f840fb78d906",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The above configuration will take all dependencies Jar files, expand them and package them together with our code. There",
        "can be cases where files already exists, such as `README.MD` or `LICENCE`. In this case we are simply excluding",
        "duplicates (`duplicatesStrategy = 'exclude'`).",
        "",
        "Let's run the test again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "10a7f6bf-fa90-4259-944e-c81212bd0842",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew functionalTest"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "b0884c81-4ae0-4020-a51b-34f980ae32a6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The functional test now passes. This means that out application is finishing without errors. Let's explore the new Jar",
        "file's contents.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "84a80796-b6be-4f44-8ff8-02d8f922a34a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "jar tf 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "a528fb79-b063-4d1e-884c-8829cacd489a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This time we have a very long list of other classes in our Jar file.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "572ab07b-e19e-40fe-ad5d-5ae6b48a899f",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Do we need all that?",
        "",
        "Answer:12",
        "Unfortunately no. When including dependencies in a project, there are deployed/packaged with the application, making the",
        "final Jar file bigger. This is known as a _Fat Jar_ (or _Uber Jar_). This is wasteful, but you cannot simply remove",
        "classes that you don't think you need. Classes may be loaded using reflection which makes it harder to determine what's",
        "needed and what's not.",
        "",
        "The [Java modules system](https://www.oracle.com/corporate/features/understanding-java-9-modules.html) together",
        "with [JLink](https://docs.oracle.com/en/java/javase/17/docs/specs/man/jlink.html) can be used to create a small version",
        "of the application containing only the required modules. This also includes the JVM as part of the deployment unit.",
        "",
        "The [GraalVM](https://www.graalvm.org/) does something similar too as it only takes what's needed but limits the use of",
        "reflection. The GraalVM is doing more than just this.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "ffcacf0c-e2cb-4482-9cf1-6287863c9f66",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's run the application.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "888885a8-ac37-42a8-9269-93f2fdf93752",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "d8f68a4a-d65f-4d16-aae8-bd415ed2e87e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The output contains a warning by log4j.",
        "",
        "```",
        "WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.",
        "```",
        "",
        "We need to add another attribute in the `MANIFEST.MD` file, as described in",
        "this [stackoverflow post](https://stackoverflow.com/questions/53049346/is-log4j2-compatible-with-java-11).",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "c4c6bd15-fc23-49bb-9bfd-5075d4691023",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index f7f9753..f75ff54 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -17,7 +17,7 @@ application {",
        " ",
        " tasks.named('jar') {",
        "     manifest {",
        "-        attributes('Main-Class': application.mainClass)",
        "+        attributes('Main-Class': application.mainClass, 'Multi-Release': 'true')",
        "     }",
        "     from {",
        "         configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "39cc512a-f869-4c33-b7f5-5d58497f969b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the Jar file and try it again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2d5b8dd8-2634-4e6b-be61-694e224988a2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew assemble --quiet",
        "java -jar 'build/libs/single-java-project.jar'"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "51b15e54-cb74-46f0-998f-97017038bea0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The warning is not showing anymore.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "3f6af2db-10f7-47c7-b5b8-e6f19a2aa602",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "What the `--quiet` argument?",
        "",
        "Answer:5",
        "Gradle provide several [logging levels](https://docs.gradle.org/current/userguide/logging.html#sec:choosing_a_log_level).",
        "The `--quiet`, or `-q` for short, instructs Gradle to produce only the important information and nothing else. Given",
        "that here we have two commands, `./gradlew ...` and `java -jar ...` and we are only interested in the output of the",
        "latter, we instructed Gradle to be quiet and not to pollute the output with unnecessary things.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "06f32c4d-b9a9-49ac-b73f-def2501dda42",
      "workingDirectory": "single-java-project",
      "parameters": [
        "We were able to package the application into a single Jar file, which can be deployed and used in production, using the",
        "Gradle `jar` task. In the next section we will do the same thing, but using a plugin. In most cases, plugins exists that",
        "do just the thing you need, and it's best to simply use them instead.",
        "",
        "Let's commit our changes before moving on.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "a9cb8097-524e-4aa8-80e2-ba1e5266b9ee",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Package application using the jar task'"
      ]
    },
    {
      "type": "subsection",
      "id": "98a7b82a-fd3a-4369-a962-5fd694ba40c9",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The ShadowJar plugin"
      ]
    },
    {
      "type": "markdown",
      "id": "32280b15-92c9-4056-9abf-8ecea2402e6d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Gradle plugins already exists that can create a Fat Jar.",
        "The [ShadowJar Gradle plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow) is a popular plugin",
        "that does just this.",
        "",
        "Let's start by tagging the project, so that we can always refer back to this start of the section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "257137d2-2413-489a-a5af-bf7aed83e3fd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git tag --annotate 'v7' --message 'The ShadowJar plugin'"
      ]
    },
    {
      "type": "markdown",
      "id": "bba9d109-780e-4f8b-9100-dbc3aea6f85a",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's add the ShadowJar Gradle plugin and remove the `jar` configuration.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "14083c7a-2b23-4ec1-8155-4b12522e7ec7",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index f7f9753..4677f81 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -2,6 +2,7 @@ plugins {",
        "     id 'application'",
        "     id 'org.owasp.dependencycheck' version '6.5.3'",
        "     id 'org.barfuin.gradle.taskinfo' version '1.3.1'",
        "+    id 'com.github.johnrengelman.shadow' version '7.1.2'",
        " }",
        " ",
        " java {",
        "@@ -15,16 +16,6 @@ application {",
        "     mainClass = 'gbc.Main'",
        " }",
        " ",
        "-tasks.named('jar') {",
        "-    manifest {",
        "-        attributes('Main-Class': application.mainClass, 'Multi-Release': 'true')",
        "-    }",
        "-    from {",
        "-        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }",
        "-    }",
        "-    duplicatesStrategy = 'exclude'",
        "-}",
        "-",
        " testing {",
        "     suites {",
        "         test {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "9100c812-9572-41eb-811d-1a2c797886cc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's see what new tasks were introduced with the new plugin.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "53c59c66-9512-4c63-99e8-5197e7ed0f80",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew tasks"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "d96aefae-aae4-47c4-b4a4-f8b010036b63",
      "workingDirectory": "single-java-project",
      "parameters": [
        "A new group, named _Shadow tasks_, is added",
        "",
        "```",
        "Shadow tasks",
        "------------",
        "knows - Do you know who knows?",
        "shadowJar - Create a combined JAR of project and runtime dependencies",
        "```",
        "",
        "The `shadowJar` task is the task responsible from creating our Fat Jar file. Let's see how the `assemble` task is",
        "affected with this new plugin.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0ee56a03-6180-453e-ab91-3d451fa37312",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew assemble tiTree"
      ]
    },
    {
      "type": "markdown",
      "id": "a2c516e3-7ea4-40a1-9e82-ac7cc86309bc",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `assemble` task now also depends on the `shadowDistTar` and `shadowDistZip` tasks, as shown next.",
        "",
        "```",
        "> Task :tiTree",
        ":assemble                                  (org.gradle.api.DefaultTask)",
        "+--- :distTar                              (org.gradle.api.tasks.bundling.Tar)",
        "|    +--- :jar                             (org.gradle.api.tasks.bundling.Jar)",
        "|    |    `--- :classes                    (org.gradle.api.DefaultTask)",
        "|    |         +--- :compileJava           (org.gradle.api.tasks.compile.JavaCompile)",
        "|    |         `--- :processResources      (org.gradle.language.jvm.tasks.ProcessResources)",
        "|    `--- :startScripts                    (org.gradle.api.tasks.application.CreateStartScripts)",
        "|         `--- :jar                        (org.gradle.api.tasks.bundling.Jar)",
        "|              `--- :classes               (org.gradle.api.DefaultTask)",
        "|                   +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "|                   `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "+--- :distZip                              (org.gradle.api.tasks.bundling.Zip)",
        "|    +--- :jar                             (org.gradle.api.tasks.bundling.Jar)",
        "|    |    `--- :classes                    (org.gradle.api.DefaultTask)",
        "|    |         +--- :compileJava           (org.gradle.api.tasks.compile.JavaCompile)",
        "|    |         `--- :processResources      (org.gradle.language.jvm.tasks.ProcessResources)",
        "|    `--- :startScripts                    (org.gradle.api.tasks.application.CreateStartScripts)",
        "|         `--- :jar                        (org.gradle.api.tasks.bundling.Jar)",
        "|              `--- :classes               (org.gradle.api.DefaultTask)",
        "|                   +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "|                   `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "+--- :jar                                  (org.gradle.api.tasks.bundling.Jar)",
        "|    `--- :classes                         (org.gradle.api.DefaultTask)",
        "|         +--- :compileJava                (org.gradle.api.tasks.compile.JavaCompile)",
        "|         `--- :processResources           (org.gradle.language.jvm.tasks.ProcessResources)",
        "+--- :shadowDistTar                        (org.gradle.api.tasks.bundling.Tar)",
        "|    +--- :shadowJar                       (com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)",
        "|    |    `--- :classes                    (org.gradle.api.DefaultTask)",
        "|    |         +--- :compileJava           (org.gradle.api.tasks.compile.JavaCompile)",
        "|    |         `--- :processResources      (org.gradle.language.jvm.tasks.ProcessResources)",
        "|    `--- :startShadowScripts              (org.gradle.api.tasks.application.CreateStartScripts)",
        "|         `--- :shadowJar                  (com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)",
        "|              `--- :classes               (org.gradle.api.DefaultTask)",
        "|                   +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "|                   `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "`--- :shadowDistZip                        (org.gradle.api.tasks.bundling.Zip)",
        "     +--- :shadowJar                       (com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)",
        "     |    `--- :classes                    (org.gradle.api.DefaultTask)",
        "     |         +--- :compileJava           (org.gradle.api.tasks.compile.JavaCompile)",
        "     |         `--- :processResources      (org.gradle.language.jvm.tasks.ProcessResources)",
        "     `--- :startShadowScripts              (org.gradle.api.tasks.application.CreateStartScripts)",
        "          `--- :shadowJar                  (com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)",
        "               `--- :classes               (org.gradle.api.DefaultTask)",
        "                    +--- :compileJava      (org.gradle.api.tasks.compile.JavaCompile)",
        "                    `--- :processResources (org.gradle.language.jvm.tasks.ProcessResources)",
        "",
        "",
        "BUILD SUCCESSFUL in 823ms",
        "1 actionable task: 1 executed",
        "```",
        "",
        "When our application is assembled, the `shadowJar` task is also invoked.",
        "",
        "Let's verify that our application is still working as expected, after the introduction of the ShadowJar Gradle plugin.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "afc1ec4f-7eb7-4183-868d-96c6497a7ee3",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew functionalTest"
      ],
      "expectedExitValue": 1,
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "a670905d-c109-4662-83bf-d900a2cc4aeb",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The test failed.",
        "",
        "```",
        "> Task :functionalTest FAILED",
        "",
        "RunApplicationTest > runApplication() FAILED",
        "    org.opentest4j.AssertionFailedError at RunApplicationTest.java:30",
        "```",
        "",
        "This means that the Jar file is not created as expected. Let's see what Jar file(s) were created.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "800297c4-dae0-42c4-b9ab-7c5c04d0d45b",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree 'build/libs'"
      ]
    },
    {
      "type": "markdown",
      "id": "9d9c1ea3-3d12-432c-9234-9b90fc104bea",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Under the `build/libs` directory, we have two Jar files.",
        "",
        "```",
        "build/libs",
        "|-- single-java-project-all.jar",
        "`-- single-java-project.jar",
        "```",
        "",
        "The `single-java-project-all.jar` was created by the `shadowJar` task, while the `single-java-project.jar` was created",
        "by the `jar` task. Given that we removed all the configuration of the the `jar` task, the created Jar file is missing",
        "the manifest and the runtime dependencies.",
        "",
        "We are going to use the `shadowJar` to create our Jar file, thus we can disable the `jar` task.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "9693ac69-e636-40eb-8b07-3e565995224e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 4677f81..0e7d516 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -41,6 +41,18 @@ testing {",
        "     }",
        " }",
        " ",
        "+tasks.named('jar') {",
        "+    enabled = false",
        "+}",
        "+",
        "+tasks.named('distTar') {",
        "+    enabled = false",
        "+}",
        "+",
        "+tasks.named('distZip') {",
        "+    enabled = false",
        "+}",
        "+",
        " repositories {",
        "     mavenCentral()",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "fcc12c0b-2a4b-4d79-a7bf-0267d1fa2051",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let create the Jar file again. But before doing that, let's first delete the existing ones, using the `clean` task.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "2732f84e-86b3-4e16-b4d7-601e47a5f36e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew clean assemble"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "ea01196f-5f11-41e0-b9c6-ecb383d4a675",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's see the contents of the `build/libs` directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "ca49a3aa-e1c8-4382-9687-0889d44f91d0",
      "workingDirectory": "single-java-project",
      "parameters": [
        "tree 'build/libs'"
      ]
    },
    {
      "type": "markdown",
      "id": "13429333-4883-4703-a0b3-7012f6c28bfd",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Now we only have one Jar file, create by the `shadowJar` task.",
        "",
        "```",
        "build/libs",
        "`-- single-java-project-all.jar",
        "```",
        ""
      ]
    },
    {
      "type": "question",
      "id": "6e07ce1c-2ce2-44c0-b267-7df9fa5f8ec2",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Question:2",
        "Why did we disable the `jar` task?",
        "",
        "Answer:3",
        "We are going to use the `shadowJar`, and therefore we don't need the `jar` to run. Disabling tasks that you don't need",
        "will speed the build performance as Gradle does not need to run tasks unnecessarily.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "a50d3699-a0f5-4a83-8586-dae0f714ce59",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The `shadowJar` is appending a classifier (`-all`) to the Jar file. We can either change our test to point to the new",
        "file name (`single-java-project-all.jar`), or configure the `shadowJar` task and drop the classifier. We will do the",
        "latter.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "bd7b10cd-f70d-4826-ad44-68169e786a2e",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 0e7d516..288d6d2 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -53,6 +53,10 @@ tasks.named('distZip') {",
        "     enabled = false",
        " }",
        " ",
        "+tasks.named('shadowJar') {",
        "+    archiveClassifier.set ''",
        "+}",
        "+",
        " repositories {",
        "     mavenCentral()",
        " }",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "a459408f-56cb-4749-97c2-3978bc15e606",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the Jar file, once more.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "c718b674-e8cc-4b8a-9079-c1da809ef049",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew clean assemble"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "b89c0cb4-03ef-401e-a05e-2174592f3517",
      "workingDirectory": "single-java-project",
      "parameters": [
        "While this change works, and is according to",
        "the [documentation](https://imperceptiblethoughts.com/shadow/configuration/#configuring-output-name), it produces",
        "warnings. There was an [issue](https://github.com/johnrengelman/shadow/issues/598) about this too, but was closed by the",
        "author.",
        "",
        "```",
        "> Task :shadowJar",
        "Execution optimizations have been disabled for task ':shadowJar' to ensure correctness due to the following reasons:",
        "  - Gradle detected a problem with the following location: '/Users/albertattard/Projects/workspace/single-java-project/build/libs/single-java-project.jar'. Reason: Task ':startScripts' uses this output of task ':shadowJar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.4/userguide/validation_problems.html#implicit_dependency for more details about this problem.",
        "",
        "Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.",
        "",
        "You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.",
        "",
        "See https://docs.gradle.org/7.4/userguide/command_line_interface.html#sec:command_line_warnings",
        "",
        "Execution optimizations have been disabled for 1 invalid unit(s) of work during this build to ensure correctness.",
        "Please consult deprecation warnings for more details.",
        "```",
        "",
        "Let's run the functional tests one more and see whether these changes work as expected.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "122a7f96-085d-4ba6-b4d7-648849118001",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew functionalTest"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "3f21104e-0065-411b-9d56-d28f8581435d",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The functional test passes. This means that despite these warnings, our application is behaving as expected. Let's run",
        "the application.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "eb526cc3-78dd-4b90-8701-c0ef54d93e09",
      "workingDirectory": "single-java-project",
      "parameters": [
        "java -jar 'build/libs/single-java-project.jar'"
      ]
    },
    {
      "type": "markdown",
      "id": "00f2c892-e8da-4b72-9f03-ee37407478a6",
      "workingDirectory": "single-java-project",
      "parameters": [
        "The warning has returned.",
        "",
        "```",
        "WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.",
        "```",
        "",
        "Unfortunately, we need to add the missing attribute manually.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "b631582c-b11c-462e-9811-0ae6b4d59a6c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "diff --git a/build.gradle b/build.gradle",
        "index 288d6d2..7308d49 100644",
        "--- a/build.gradle",
        "+++ b/build.gradle",
        "@@ -55,6 +55,9 @@ tasks.named('distZip') {",
        " ",
        " tasks.named('shadowJar') {",
        "     archiveClassifier.set ''",
        "+    manifest {",
        "+        attributes('Multi-Release': 'true')",
        "+    }",
        " }",
        " ",
        " repositories {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "9e84af85-a516-4224-90ad-a0dce3255c8c",
      "workingDirectory": "single-java-project",
      "parameters": [
        "Let's create the Jar file and try it again.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e9edb939-0470-4d81-a051-a83907c222aa",
      "workingDirectory": "single-java-project",
      "parameters": [
        "./gradlew assemble --quiet",
        "java -jar 'build/libs/single-java-project.jar'"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "25af9c3d-4f84-4541-b7d3-e13a452c17db",
      "workingDirectory": "single-java-project",
      "parameters": [
        "This concludes our section. Let's commit the changes made before moving to the next chapter.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "b313cb89-3420-436a-aa24-16e5811aa181",
      "workingDirectory": "single-java-project",
      "parameters": [
        "git add .",
        "git commit --message 'Use the shadow jar plugin'"
      ]
    }
  ]
}