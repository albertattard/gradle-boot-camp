{
  "entries": [
    {
      "type": "chapter",
      "id": "b13469f8-3eb8-4ed3-9534-6b611b671de7",
      "parameters": [
        "Title:1",
        "Multi-Project Application",
        "Description:1",
        "A more advanced example of how Gradle can be used with large applications, comprising smaller projects."
      ]
    },
    {
      "type": "markdown",
      "id": "fdf4616f-4318-435f-8255-515e902cb767",
      "parameters": [
        "In software architecture we may need to apply dependency bounds and only allow dependency in one direction and not the",
        "other. For example, the _domain_ should not be dependent on the _database_ or the _UI_, but vice versa. We can enforce",
        "this by using multiple-project application.",
        "",
        "In this chapter will have a simple shipping-cart (part of the _domain_) and another class that retrieves the list of",
        "items and then prints the shopping-cart contents (part of the _app_). The user can add items to the shopping-cart via",
        "command line arguments. Each item must comprise letters and numbers and must be between 3 and 24 letters long. The",
        "application is kept very simple as the focus here is how to set up and take advantage of multiple-project builds.",
        ""
      ]
    },
    {
      "type": "section",
      "id": "0c164524-88b9-4d2e-9bba-4fed6a09ec6e",
      "parameters": [
        "Create the project"
      ]
    },
    {
      "type": "markdown",
      "id": "0bce7069-bf41-4070-a45a-1dad55bfab56",
      "parameters": [
        "Let's start by deleting the directory that we will be working on `multi-project-application` and creating it again. This",
        "makes sure that there is no residue and that we are working in a clean slate. We will not create the two sub-projects",
        "just yet as these are set up in later sections.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "d7e0e173-b9ae-43bb-8532-8d66ef1decdb",
      "parameters": [
        "rm -rf 'multi-project-application'",
        "mkdir 'multi-project-application'"
      ]
    },
    {
      "type": "markdown",
      "id": "d1c35f2b-acc7-473e-9b09-6e81e56a66eb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Set Git's user (_developer_) name, using the providing variable. Press enter after entering your name and the rest will",
        "update automatically.",
        ""
      ]
    },
    {
      "type": "variable",
      "id": "a5889d77-a415-49dd-abc1-5b0b9a1f15bd",
      "name": "DEVELOPER_NAME",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Albert Attard"
      ],
      "sensitive": false
    },
    {
      "type": "markdown",
      "id": "be66ddfa-3149-4d25-ba5b-fdbbd2f4529c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Set Git's user (_developer_) email, using the providing variable. Press enter after entering your name and the rest will",
        "update automatically. The email is more important than the name as Git uses this to identify you in the event you push",
        "these to a remote repository.",
        ""
      ]
    },
    {
      "type": "variable",
      "id": "1694212f-35aa-4aba-aa50-2f243c5fb0aa",
      "name": "DEVELOPER_EMAIL",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "albertattard@gmail.com"
      ],
      "sensitive": false
    },
    {
      "type": "markdown",
      "id": "9d7fa1e0-0918-4fc1-822d-e08840d3e583",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Add version control so that we can track our changes and configure the developer's details.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "10734ccd-174a-46c6-836e-40ea7cb3cbec",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git init --initial-branch=main",
        "git config user.name '${DEVELOPER_NAME}'",
        "git config user.email '${DEVELOPER_EMAIL}'"
      ],
      "variables": [
        "DEVELOPER_NAME",
        "DEVELOPER_EMAIL"
      ]
    },
    {
      "type": "markdown",
      "id": "2beed857-f077-4085-8ea6-d4e7154b3b25",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's verify that our Git configuration was properly applied.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "743bf9c8-63ff-439a-8419-8a8599cfb457",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git config --list --local"
      ]
    },
    {
      "type": "markdown",
      "id": "ea2ffe46-1f56-4af7-9e1a-7b8c12e146d7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Both name and email should be properly set, as shown next.",
        "",
        "```",
        "user.name=${DEVELOPER_NAME}",
        "user.email=${DEVELOPER_EMAIL}",
        "```",
        "",
        "Let's create a basic Gradle project using Groovy as the DSL language, and set the Gradle version to 7.4.",
        ""
      ],
      "variables": [
        "DEVELOPER_NAME",
        "DEVELOPER_EMAIL"
      ]
    },
    {
      "type": "command",
      "id": "e5b660e7-55d8-494a-b650-e99426b61cdb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "gradle init --type basic --dsl groovy --project-name multi-project-application",
        "./gradlew wrapper --gradle-version=7.4",
        "./gradlew --version"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "3230a26e-6f27-4bd7-88ee-44772ea02923",
      "parameters": [
        "Let's remove the comments from the `settings.gradle` file."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "8f7e9439-cdb2-47ba-8840-cbbb57c8579c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/settings.gradle b/settings.gradle",
        "index fd273a0..5737df9 100644",
        "--- a/settings.gradle",
        "+++ b/settings.gradle",
        "@@ -1,10 +1 @@",
        "-/*",
        "- * This file was generated by the Gradle 'init' task.",
        "- *",
        "- * The settings file is used to specify which projects to include in your build.",
        "- *",
        "- * Detailed information about configuring a multi-project build in Gradle can be found",
        "- * in the user manual at https://docs.gradle.org/7.4/userguide/multi_project_builds.html",
        "- */",
        "-",
        " rootProject.name = 'multi-project-application'",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7828a715-1df7-4a63-ada9-62fdaf5bf26e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's update the `.gitignore` file so that we ignore the IDE related files.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "19557743-13f8-4814-95e6-a5bf2bbcc3b9",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/.gitignore b/.gitignore",
        "index 1b6985c..92b4736 100644",
        "--- a/.gitignore",
        "+++ b/.gitignore",
        "@@ -1,5 +1,5 @@",
        "-# Ignore Gradle project-specific cache directory",
        " .gradle",
        "-",
        "-# Ignore Gradle build output directory",
        "+.idea",
        "+.vscode",
        "+bin",
        " build",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "1255dc88-13eb-43b1-8198-6adb0e6a2def",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We will have multiple projects, therefore we don't need to have a `build.gradle` file at this level. Let's delete it.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "78fe0709-2e51-490f-b65f-2df9550b6f2c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "rm build.gradle"
      ]
    },
    {
      "type": "markdown",
      "id": "e201f315-e202-42c0-a715-55c51e165115",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This completes our project setup. Let's commit the changes before moving to the next step.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "b834f8d1-3b65-4516-aec1-544e7dbb4965",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git add .",
        "git commit --message 'Create project'"
      ]
    },
    {
      "type": "section",
      "id": "dab97989-cd59-4693-8fea-25809728eed7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Create sub-projects"
      ]
    },
    {
      "type": "markdown",
      "id": "1445bf99-0329-4470-9772-58c5e5c311b8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This multi-project will contain two sub-projects",
        "",
        "- the _domain_ - will put the shopping-cart logic here",
        "- the _app_ - will put the code that interacts with the user here",
        "",
        "Let's start by listing the current projects.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0435906c-9070-493a-bfaa-a52a82a70ddf",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew projects"
      ]
    },
    {
      "type": "markdown",
      "id": "ed8f91b8-9d6d-4101-9eee-ac1c7c2ff51b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This Gradle project has no sub-projects yet.",
        "",
        "```",
        "Root project 'multi-project-application'",
        "No sub-projects",
        "```",
        "",
        "We need to create two sub-projects. The _domain_ does not depend on anything else while the _app_ sub-project will",
        "depend on the _domain_. Given this dependency constraint, it is best to start from the _domain_.",
        ""
      ]
    },
    {
      "type": "subsection",
      "id": "5f2f881c-d67f-4b44-bd7f-48f52229cc7e",
      "parameters": [
        "The domain sub-project"
      ]
    },
    {
      "type": "markdown",
      "id": "170a7787-fe20-466f-9ab4-c966134e3195",
      "parameters": [
        "Let's start by tagging the project's state so that we can refer back to this point if we need to.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "6526c284-5fec-4206-8386-483df26e48b4",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git tag --annotate 'v1' --message 'The domain sub-project'"
      ]
    },
    {
      "type": "markdown",
      "id": "b19d81e6-094a-4bd6-b813-be461dd56498",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We can start by creating a new directory, `domain`. The name of the directory should match the sub-project name to avoid",
        "confusion.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "eeaf9e5e-2ecc-4476-96df-e25180991019",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir 'domain'"
      ]
    },
    {
      "type": "markdown",
      "id": "e9d7898d-11a5-455a-8f5b-9ada4b275020",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The sub-projects are determined during the initialisation phase, during which the `settings.gradle` file is processed.",
        "We need to include our new sub-project in the `settings.gradle` file."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "6aaabf0e-a872-494c-bd0e-7c7f0b5ce4e7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/settings.gradle b/settings.gradle",
        "index 5737df9..fb31821 100644",
        "--- a/settings.gradle",
        "+++ b/settings.gradle",
        "@@ -1 +1,3 @@",
        " rootProject.name = 'multi-project-application'",
        "+",
        "+include('domain')",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "b1249a91-89dc-4c3a-83bf-7be0f761475a",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's list the sub-projects found in this Gradle project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "7d1f2920-ec75-40b0-923a-be453e79b21c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew projects"
      ]
    },
    {
      "type": "markdown",
      "id": "0973dd70-f5c1-4d13-aad1-2b3bd7a2f309",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Our new sub-project should now be listed.",
        "",
        "```",
        "Root project 'multi-project-application'",
        "\\--- Project ':domain'",
        "```",
        "",
        "We will be using the Java programming language. Let's set up the directory structure.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "989b77ad-7cd8-4904-b40c-68c3abfa73c2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'domain/src/main/java'",
        "mkdir -p 'domain/src/main/resources'",
        "mkdir -p 'domain/src/test/java'",
        "mkdir -p 'domain/src/test/resources'"
      ]
    },
    {
      "type": "markdown",
      "id": "baa9b242-dea8-4a65-9ab9-0e00c8cc2ac8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Each sub-project needs to have its own `build.gradle` file and then define the plugins they will use and configure their",
        "respective tasks. Let's start by creating the `domain/build.gradle` file first."
      ]
    },
    {
      "type": "command",
      "id": "b58c299f-c853-4bdf-82a0-b19a433ce9bb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'domain/build.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "164814e4-74f3-4074-a143-71dbe4c0204b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The _domain_ sub-project will not be the starting point, and thus will not have a _main_ method. Therefore, the is no",
        "need to use the `application` plugin. Instead we can use",
        "the [`java-library` Plugin](https://docs.gradle.org/current/userguide/java_library_plugin.html). This is similar to",
        "the `java` Plugin, but it provides specific things for projects that are meant to be used as libraries (or dependencies).",
        "The terms dependencies and libraries are used interchangeably.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "c040eca7-083b-4afc-a775-c059e79e26c1",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/build.gradle b/domain/build.gradle",
        "index e69de29..59a20ef 100644",
        "--- a/domain/build.gradle",
        "+++ b/domain/build.gradle",
        "@@ -0,0 +1,3 @@",
        "+plugins {",
        "+    id 'java-library'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "bb8652f1-0a93-4084-9e3a-591712baacbd",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's set the Java version to Java 17 using the `toolchain`."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "6c09cba9-02af-422e-8b32-2ac44474b597",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/build.gradle b/domain/build.gradle",
        "index 59a20ef..04cb686 100644",
        "--- a/domain/build.gradle",
        "+++ b/domain/build.gradle",
        "@@ -1,3 +1,10 @@",
        " plugins {",
        "     id 'java-library'",
        " }",
        "+",
        "+java {",
        "+    toolchain {",
        "+        languageVersion = JavaLanguageVersion.of(17)",
        "+        vendor = JvmVendorSpec.ORACLE",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "07251054-db76-4254-bb98-4558cc5da19a",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's add the [Guava dependency](https://mvnrepository.com/artifact/com.google.guava/guava) and use JUnit 5 testing framework."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "2e8b9904-2a92-4cdb-8aad-59c438f3e31d",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/build.gradle b/domain/build.gradle",
        "index 04cb686..442b3db 100644",
        "--- a/domain/build.gradle",
        "+++ b/domain/build.gradle",
        "@@ -8,3 +8,19 @@ java {",
        "         vendor = JvmVendorSpec.ORACLE",
        "     }",
        " }",
        "+",
        "+repositories {",
        "+    mavenCentral()",
        "+}",
        "+",
        "+dependencies {",
        "+    implementation 'com.google.guava:guava:31.0.1-jre'",
        "+}",
        "+",
        "+testing {",
        "+    suites {",
        "+        test {",
        "+            useJUnitJupiter('5.8.2')",
        "+        }",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "0fde4db9-7073-4b24-81a9-ffb692af3448",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This completes the Gradle configuration of the _domain_ sub-project.",
        "",
        "All the code that we will add to the _domain_, will be within the `domain` package (directory). Let's create the",
        "package, starting from the test."
      ]
    },
    {
      "type": "command",
      "id": "82d5a7e5-2961-4c16-bfcc-7f11691607c8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'domain/src/test/java/gbc/domain'"
      ]
    },
    {
      "type": "markdown",
      "id": "52394a06-2e5f-4611-93a1-8e457a47daa2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now, let's create the test class, before the actual class. The order which these classes are created does not matter and",
        "you can follow the order you prefer. This is not a TDD boot camp.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "67afb9a7-982d-4520-8cfe-b655f1d6f126",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'domain/src/test/java/gbc/domain/CartTest.java'",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "fae34044-8cfb-43ca-bcf3-b364b1dfbefa",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Each item must comprise letters and numbers and must be between 3 and 24 letters long. Let's add two tests, one that",
        "assert that an exception is thrown when an invalid item is provided to the shopping-cart. The second test verifies that",
        "the shopping-cart can take valid items and is able ti print them.",
        "",
        "We can take advantage from",
        "the [`@ParameterizedTest`](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests) to",
        "provide the test with several invalid inputs.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "2d5982c1-5e13-41e7-a41a-b53be9ad9145",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/src/test/java/gbc/domain/CartTest.java b/domain/src/test/java/gbc/domain/CartTest.java",
        "index e69de29..8c8a6d7 100644",
        "--- a/domain/src/test/java/gbc/domain/CartTest.java",
        "+++ b/domain/src/test/java/gbc/domain/CartTest.java",
        "@@ -0,0 +1,42 @@",
        "+package gbc.domain;",
        "+",
        "+import org.junit.jupiter.api.Test;",
        "+import org.junit.jupiter.api.function.Executable;",
        "+import org.junit.jupiter.params.ParameterizedTest;",
        "+import org.junit.jupiter.params.provider.ValueSource;",
        "+",
        "+import java.util.List;",
        "+",
        "+import static org.junit.jupiter.api.Assertions.assertEquals;",
        "+import static org.junit.jupiter.api.Assertions.assertThrows;",
        "+",
        "+class CartTest {",
        "+",
        "+    @ParameterizedTest",
        "+    @ValueSource(strings = {\"\", \"a\", \"too long to be a valid item\"})",
        "+    void failWhenGivenInvalidInput(final String invalidInput) {",
        "+        /* Given */",
        "+        final Cart cart = new Cart();",
        "+",
        "+        /* When */",
        "+        final Executable executable = () -> cart.add(invalidInput);",
        "+",
        "+        /* Then */",
        "+        assertThrows(IllegalArgumentException.class, executable);",
        "+    }",
        "+",
        "+    @Test",
        "+    void createACartAndItems() {",
        "+        /* Given */",
        "+        final Cart cart = new Cart();",
        "+        cart.add(\"Tomatoes\");",
        "+        cart.add(\"Carrots\");",
        "+",
        "+        /* When */",
        "+        final List<String> items = cart.items();",
        "+",
        "+        /* Then */",
        "+        final List<String> expected = List.of(\"Tomatoes\", \"Carrots\");",
        "+        assertEquals(expected, items);",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "0bea45f0-3dd4-457a-b84c-89aa609c89e7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "There is no point running the test now as this class will not compile. Let's create the package (directory)."
      ]
    },
    {
      "type": "command",
      "id": "41b0e688-8fa2-4ba1-b9b3-24107d24ac07",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'domain/src/main/java/gbc/domain'"
      ]
    },
    {
      "type": "markdown",
      "id": "ce677e11-1f27-42a9-aa91-8ff126d35bce",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's create the `Cart.java` class.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "288e3aa8-faf4-44a1-8cce-97fffdaedf5e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'domain/src/main/java/gbc/domain/Cart.java'"
      ]
    },
    {
      "type": "markdown",
      "id": "2734a2a3-0756-4c37-9d7d-cd0514b2c6a2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's implement the shopping-cart solution."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "845fe4a9-47c4-4d15-82d9-42dea0fdf1da",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/src/main/java/gbc/domain/Cart.java b/domain/src/main/java/gbc/domain/Cart.java",
        "index e69de29..b535779 100644",
        "--- a/domain/src/main/java/gbc/domain/Cart.java",
        "+++ b/domain/src/main/java/gbc/domain/Cart.java",
        "@@ -0,0 +1,22 @@",
        "+package gbc.domain;",
        "+",
        "+import java.util.ArrayList;",
        "+import java.util.List;",
        "+",
        "+import static com.google.common.base.Preconditions.checkArgument;",
        "+import static com.google.common.base.Preconditions.checkNotNull;",
        "+",
        "+public class Cart {",
        "+    private final List<String> items = new ArrayList<>();",
        "+",
        "+    public void add(final String item) {",
        "+        checkNotNull(item);",
        "+        checkArgument(item.matches(\"[\\\\w ]{3,24}\"));",
        "+",
        "+        this.items.add(item);",
        "+    }",
        "+",
        "+    public List<String> items() {",
        "+        return List.copyOf(items);",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "question",
      "id": "9401eeea-5665-4438-b049-7a115ee8dff4",
      "parameters": [
        "Question:2",
        "Why are we returning a copy of the list (`return List.copyOf(items);`)?",
        "",
        "Answer:46",
        "This is referred to as defensive copying. If we return the list, anyone can simply modify it for us. Consider the",
        "following example.",
        "",
        "```",
        "final Cart cart = new Cart();",
        "cart.items().add(\"a\");",
        "cart.items().add(\"b\");",
        "cart.items().add(\"c\");",
        "```",
        "",
        "The above example bypasses the validation added to the `Cart`'s `add()` method, as we are adding the items directly to",
        "the `List`. To prevent this problem we return a copy instead. Changes to the returned list, if allowed, will not affect",
        "the list of item inside the `Cart`.",
        "",
        "Following is an alternative approach that achieves the same thing, without creating a new list everytime.",
        "",
        "```",
        "package gbc.domain;",
        "",
        "import java.util.ArrayList;",
        "import java.util.Collections;",
        "import java.util.List;",
        "",
        "import static com.google.common.base.Preconditions.checkArgument;",
        "import static com.google.common.base.Preconditions.checkNotNull;",
        "",
        "public class Cart {",
        "    private final List<String> items = new ArrayList<>();",
        "    private final List<String> immutable = Collections.unmodifiableList(items);",
        "",
        "    public void add(final String item) {",
        "        checkNotNull(item);",
        "        checkArgument(item.matches(\"[\\\\w ]{3,24}\"));",
        "",
        "        this.items.add(item);",
        "    }",
        "",
        "    public List<String> items() {",
        "        return immutable;",
        "    }",
        "}",
        "```",
        "",
        "Refer to _Item 50: Make defensive copies when needed_ in the book _Effective Java_, for more information about this",
        "pattern.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "bb98a659-f9a7-4d9a-beec-575f2703570b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's build the project. Note that we are not build the _domain_ sub-project but the whole project."
      ]
    },
    {
      "type": "command",
      "id": "b94a309a-1116-495f-853b-b91629c8844e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew build"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "eef20519-ae2a-46b9-bde5-714da1ee0b2f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Notice that the tasks are now prefixed with the sub-project name, `:domain`, as shown next.",
        "",
        "```",
        "> Task :domain:compileJava",
        "> Task :domain:processResources NO-SOURCE",
        "> Task :domain:classes",
        "> Task :domain:jar",
        "> Task :domain:assemble",
        "> Task :domain:compileTestJava NO-SOURCE",
        "> Task :domain:processTestResources NO-SOURCE",
        "> Task :domain:testClasses UP-TO-DATE",
        "> Task :domain:test NO-SOURCE",
        "> Task :domain:check UP-TO-DATE",
        "> Task :domain:build",
        "```",
        "",
        "Use the `--console=verbose` argument if this is not visible on the console.",
        "",
        "Let's analyse the directory structure of our project.",
        "",
        ""
      ]
    },
    {
      "type": "command",
      "id": "80ebbda3-f255-466c-98f4-f39164e55fe0",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "tree ."
      ]
    },
    {
      "type": "markdown",
      "id": "ed4e130c-361f-4a3d-9464-59df2555b03a",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Note that we have a `build` directory under the _domain_ sub-project.  Each sub-project will have its `build` directory.  The output of each sub-project is saved under the respective `build` directory.",
        "",
        "```",
        ".",
        "|-- domain",
        "|   |-- build",
        "|   |   |-- classes",
        "|   |   |   `-- java",
        "|   |   |       |-- main",
        "|   |   |       |   `-- gbc",
        "|   |   |       |       `-- domain",
        "|   |   |       |           `-- Cart.class",
        "|   |   |       `-- test",
        "|   |   |           `-- gbc",
        "|   |   |               `-- domain",
        "|   |   |                   `-- CartTest.class",
        "|   |   |-- generated",
        "|   |   |   `-- sources",
        "|   |   |       |-- annotationProcessor",
        "|   |   |       |   `-- java",
        "|   |   |       |       |-- main",
        "|   |   |       |       `-- test",
        "|   |   |       `-- headers",
        "|   |   |           `-- java",
        "|   |   |               |-- main",
        "|   |   |               `-- test",
        "|   |   |-- libs",
        "|   |   |   `-- domain.jar",
        "|   |   |-- reports",
        "|   |   |   `-- tests",
        "|   |   |       `-- test",
        "|   |   |           |-- classes",
        "|   |   |           |   `-- gbc.domain.CartTest.html",
        "|   |   |           |-- css",
        "|   |   |           |   |-- base-style.css",
        "|   |   |           |   `-- style.css",
        "|   |   |           |-- index.html",
        "|   |   |           |-- js",
        "|   |   |           |   `-- report.js",
        "|   |   |           `-- packages",
        "|   |   |               `-- gbc.domain.html",
        "|   |   |-- test-results",
        "|   |   |   `-- test",
        "|   |   |       |-- TEST-gbc.domain.CartTest.xml",
        "|   |   |       `-- binary",
        "|   |   |           |-- output.bin",
        "|   |   |           |-- output.bin.idx",
        "|   |   |           `-- results.bin",
        "|   |   `-- tmp",
        "|   |       |-- compileJava",
        "|   |       |   `-- previous-compilation-data.bin",
        "|   |       |-- compileTestJava",
        "|   |       |   `-- previous-compilation-data.bin",
        "|   |       |-- jar",
        "|   |       |   `-- MANIFEST.MF",
        "|   |       `-- test",
        "|   |-- build.gradle",
        "|   `-- src",
        "|       |-- main",
        "|       |   |-- java",
        "|       |   |   `-- gbc",
        "|       |   |       `-- domain",
        "|       |   |           `-- Cart.java",
        "|       |   `-- resources",
        "|       `-- test",
        "|           |-- java",
        "|           |   `-- gbc",
        "|           |       `-- domain",
        "|           |           `-- CartTest.java",
        "|           `-- resources",
        "|-- gradle",
        "|   `-- wrapper",
        "|       |-- gradle-wrapper.jar",
        "|       `-- gradle-wrapper.properties",
        "|-- gradlew",
        "|-- gradlew.bat",
        "`-- settings.gradle",
        "",
        "49 directories, 24 files",
        "```",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "edc14579-d34c-4c64-9df6-58ed24638a76",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We are ready from our _domain_ sub-project. Let's commit our changes before moving to the _app_ sub-project."
      ]
    },
    {
      "type": "command",
      "id": "40572e7e-d8b7-455c-ab7b-5db771fbd327",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git add .",
        "git commit --message 'Create the domain sub-project'"
      ]
    },
    {
      "type": "subsection",
      "id": "f98cac37-23e7-4414-98c4-cd7b013a3726",
      "parameters": [
        "The app sub-project"
      ]
    },
    {
      "type": "markdown",
      "id": "5c26c4c3-94e6-4db5-aebe-9efc866fd36a",
      "parameters": [
        "The _domain_ part is ready. Let's now turn our focus to the _app_ part. The _app_ will depend on the _domain_ and it",
        "will use classes created in the _domain_ sub-project.",
        "",
        "Let's start by tagging our progress.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "3e74a280-8397-4e93-98fa-3a7973007a59",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git tag --annotate 'v2' --message 'The app sub-project'"
      ]
    },
    {
      "type": "markdown",
      "id": "baf54603-4ba8-4c8b-b618-9c56e7f7996b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's create the `app` directory. All _app_ related code will go here.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "6ad57241-da86-48b4-a899-17cb482dd04e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir 'app'"
      ]
    },
    {
      "type": "markdown",
      "id": "bc95e348-ccef-49ee-98a2-404d5c89e238",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We should not forget to include the new sub-project to the `settings.gradle` file.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "23c8f576-dd8e-497c-8e68-f0001f940eb6",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/settings.gradle b/settings.gradle",
        "index c3e2b1b..fb31821 100644",
        "--- a/settings.gradle",
        "+++ b/settings.gradle",
        "@@ -1,3 +1,4 @@",
        " rootProject.name = 'multi-project-application'",
        " ",
        " include('domain')",
        "+include('app')",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "ebdcad45-5707-4e8a-a64e-20fe4c46e07f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The `include` takes a list, and instead of two lines we can write the above as",
        "",
        "```",
        "include('domain', 'app')",
        "```",
        "",
        "I prefer to add these individually, but this is just a personal taste.",
        "",
        "We need to create the `build.gradle` for the _app_ sub-project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "0c9639d5-bf52-4a8f-bc71-ccb2a691f634",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'app/build.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "9f7d945d-7101-4c8b-a477-95cc7ed7f7cd",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The _app_ sub-project will contain the _main_ method. Therefore, we can make use from the `application` plugin. Let's",
        "set the Java to version 17 and add the repository and finally, let's add the test suite. We will be using the JUnit 5",
        "testing framework.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "c39821e9-07d4-4955-996c-c876b4840c67",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index e69de29..82b9d4b 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -0,0 +1,22 @@",
        "+plugins {",
        "+    id 'application'",
        "+}",
        "+",
        "+java {",
        "+    toolchain {",
        "+        languageVersion = JavaLanguageVersion.of(17)",
        "+        vendor = JvmVendorSpec.ORACLE",
        "+    }",
        "+}",
        "+",
        "+repositories {",
        "+    mavenCentral()",
        "+}",
        "+",
        "+testing {",
        "+    suites {",
        "+        test {",
        "+            useJUnitJupiter('5.8.2')",
        "+        }",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "12fcf7ca-87db-44ff-9202-8d430c5af419",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We can also add other sub-project as dependencies. Let's add the _domain_ sub-project.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "22fc18a2-7179-4f8f-87d1-53d0fb5d433f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index 82b9d4b..bbbc317 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -13,6 +13,10 @@ repositories {",
        "     mavenCentral()",
        " }",
        " ",
        "+dependencies {",
        "+    implementation project(':domain')",
        "+}",
        "+",
        " testing {",
        "     suites {",
        "         test {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "28ae616a-4fdc-4197-8267-30fe3cbf7872",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's create the directories required by a Java project.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "4f3034fd-9f93-4683-9e1b-a03814672513",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:2",
        "What happens if we don't create all the directories?",
        "",
        "Answer:4",
        "Nothing. We can only create the directories we need. For example, if we will not use the _resources_ then we don't need",
        "to have `resources` directories. I simply create these four for convenience, but can be created at a later stage when",
        "required.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e13ba75d-952c-4724-948e-8167bd96a4a8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'app/src/main/java'",
        "mkdir -p 'app/src/main/resources'",
        "mkdir -p 'app/src/test/java'",
        "mkdir -p 'app/src/test/resources'"
      ]
    },
    {
      "type": "markdown",
      "id": "88582ff7-8462-46a3-be75-0b6a24291661",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The classes within the _app_ sub-project will use a different package. We will use the `app` package (directory).",
        "",
        ""
      ]
    },
    {
      "type": "question",
      "id": "2cfcb76c-4b98-4bce-811f-ee1333a5c2c7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:2",
        "Why do we need to have a different package?",
        "",
        "Answer:4",
        "While it is not a must to have a different package, it is very convenient. When the application is packaged as a single",
        "Fat Jar, all classes will be brought together. If we use the same packages (directories), then there is a risk of having",
        "two classes with same name and in the same package, in different sub-projects. When merged, one of the classes will be",
        "used while the other skipped."
      ]
    },
    {
      "type": "command",
      "id": "58ca9f5d-938d-4109-a1ff-9945fec716a3",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'app/src/test/java/gbc/app'"
      ]
    },
    {
      "type": "markdown",
      "id": "084dfc54-338c-4647-a1f3-1a4e757f0d4f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Like before, let's create our test `MainTest.java` class first.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e1480675-d0fd-4ee3-9ee4-50dd6920c9f8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'app/src/test/java/gbc/app/MainTest.java'"
      ]
    },
    {
      "type": "markdown",
      "id": "8a426273-ed85-4571-8b97-1a28c665a02f",
      "parameters": [
        "Our application is very basic as the idea is not to build a complicated application but to focus on the Gradle",
        "multi-project features. The user will interact with the application using command line arguments, as shown next.",
        "",
        "```",
        "java -jar app/build/libs/shopping-cart.jar 'Tomatoes' 'Carrots'",
        "```",
        "",
        "The user added two items to the shopping-cart and the application will print the following to the standard output.",
        "",
        "```",
        "Need to buy",
        "  > Tomatoes",
        "  > Carrots",
        "```",
        "",
        "Let's write a unit test that captures this. Note that we will not cover functional tests in this chapter. Please refer",
        "to the section _Package the application_ within the _Java Application_ chapter for more information about test suites. ",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "96d5c2f8-138d-4c55-9ade-24349b480604",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/src/test/java/gbc/app/MainTest.java b/app/src/test/java/gbc/app/MainTest.java",
        "index e69de29..6494a9d 100644",
        "--- a/app/src/test/java/gbc/app/MainTest.java",
        "+++ b/app/src/test/java/gbc/app/MainTest.java",
        "@@ -0,0 +1,43 @@",
        "+package gbc.app;",
        "+",
        "+import org.junit.jupiter.api.Test;",
        "+",
        "+import java.io.ByteArrayOutputStream;",
        "+import java.io.PrintStream;",
        "+import java.nio.charset.StandardCharsets;",
        "+",
        "+import static org.junit.jupiter.api.Assertions.assertEquals;",
        "+import static org.junit.jupiter.api.Assertions.assertNotNull;",
        "+",
        "+class MainTest {",
        "+    @Test",
        "+    void runTheApplication() {",
        "+        /* Given */",
        "+        final String[] args = {\"Tomatoes\", \"Carrots\"};",
        "+",
        "+        /* When */",
        "+        final String output = runAndCaptureStandardOut(() -> Main.main(args));",
        "+",
        "+        /* Then */",
        "+        final String expected = \"\"\"",
        "+                Need to buy",
        "+                  > Tomatoes",
        "+                  > Carrots",
        "+                \"\"\";",
        "+        assertEquals(expected, output);",
        "+    }",
        "+",
        "+    private static String runAndCaptureStandardOut(final Runnable task) {",
        "+        assertNotNull(task);",
        "+",
        "+        final PrintStream original = System.out;",
        "+        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
        "+        try (PrintStream bufferedOut = new PrintStream(buffer)) {",
        "+            System.setOut(bufferedOut);",
        "+            task.run();",
        "+        } finally {",
        "+            System.setOut(original);",
        "+        }",
        "+        return buffer.toString(StandardCharsets.UTF_8);",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "3132a724-0df5-4606-855c-ed546baaa71b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Our test is complete. Let's turn our focus on the implementation starting by creating the `gbc.app` package (`gbc/app`",
        "directory)."
      ]
    },
    {
      "type": "command",
      "id": "b85157f6-0904-4c82-a1d6-d74076a79908",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'app/src/main/java/gbc/app'"
      ]
    },
    {
      "type": "markdown",
      "id": "266c3159-e8a4-47ce-bba5-d0dcdc350917",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's create the `Main.java` class and implement the required logic.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "164bee75-8335-4723-bd61-1d8eb429c667",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'app/src/main/java/gbc/app/Main.java'"
      ]
    },
    {
      "type": "markdown",
      "id": "70f804b9-6ad6-474d-9881-149fda541433",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Add the following code to the `Main.java` class."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "f89e1d5c-cfc3-4afa-b740-0a1f16e15037",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/src/main/java/gbc/app/Main.java b/app/src/main/java/gbc/app/Main.java",
        "index e69de29..f305de4 100644",
        "--- a/app/src/main/java/gbc/app/Main.java",
        "+++ b/app/src/main/java/gbc/app/Main.java",
        "@@ -0,0 +1,15 @@",
        "+package gbc.app;",
        "+",
        "+import gbc.domain.Cart;",
        "+",
        "+import java.util.Arrays;",
        "+",
        "+public class Main {",
        "+    public static void main(final String[] args) {",
        "+        final Cart cart = new Cart();",
        "+        Arrays.stream(args).forEach(cart::add);",
        "+",
        "+        System.out.println(\"Need to buy\");",
        "+        cart.items().forEach(item -> System.out.printf(\"  > %s%n\", item));",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "0e3f1812-cf31-447e-8c0c-6c1594b65113",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's run the tests again."
      ]
    },
    {
      "type": "command",
      "id": "4dad3a78-ee41-4390-bccb-7b1f8153bb95",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew test"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "32cdde44-6c52-4b6d-9ee1-9016ecdb6829",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Note that both sub-project tests were executed.",
        "",
        "```",
        "> Task :domain:compileJava UP-TO-DATE",
        "> Task :app:compileJava UP-TO-DATE",
        "> Task :app:processResources NO-SOURCE",
        "> Task :app:classes UP-TO-DATE",
        "> Task :app:compileTestJava UP-TO-DATE",
        "> Task :app:processTestResources NO-SOURCE",
        "> Task :app:testClasses UP-TO-DATE",
        "> Task :domain:processResources NO-SOURCE",
        "> Task :domain:classes UP-TO-DATE",
        "> Task :domain:jar UP-TO-DATE",
        "> Task :app:test UP-TO-DATE",
        "> Task :domain:compileTestJava UP-TO-DATE",
        "> Task :domain:processTestResources NO-SOURCE",
        "> Task :domain:testClasses UP-TO-DATE",
        "> Task :domain:test UP-TO-DATE",
        "```",
        ""
      ]
    },
    {
      "type": "question",
      "id": "cfb4a60e-5ee8-4d02-993a-c590c478ea7e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:3",
        "Both sub-projects have the `test` task. What happens if only one of the sub-projects have a given task?",
        "",
        "",
        "Answer:3",
        "  Gradle will run the task for that sub-project. Say that only the _domain_ sub-project has the task `xyz`. When we run",
        "  the command `./gradlew xyz`, the `xyz` task within the _domain_ sub-project is executed. The _app_ sub-project is",
        "  unaffected."
      ]
    },
    {
      "type": "question",
      "id": "6b8336dd-7584-4162-b6bf-14d62bd2a445",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:2",
        "Can we run the test for one of the sub-projects?",
        "",
        "Answer:34",
        "Yes. We can specify which sub-project. Say we like to run the tests for the _domain_ sub-project. Then we can run the",
        "following command.",
        "",
        "```",
        "./gradlew :domain:test --console=verbose",
        "```",
        "",
        "You will notice that only the following tasks were executed, and the _app_ tests did not actually run.",
        "",
        "```",
        "> Task :domain:compileJava UP-TO-DATE",
        "> Task :domain:processResources NO-SOURCE",
        "> Task :domain:classes UP-TO-DATE",
        "> Task :domain:compileTestJava UP-TO-DATE",
        "> Task :domain:processTestResources NO-SOURCE",
        "> Task :domain:testClasses UP-TO-DATE",
        "> Task :domain:test UP-TO-DATE",
        "```",
        "",
        "There is a small catch, if you can call it so. The _app_ sub-project depends on the _domain_ sub-project. So when we",
        "specify tasks to be executed on the _app_ sub-project, tasks from the _domain_ sub-project will be executed too. We",
        "cannot, for example, compile the code in the _app_ without first compiling the code in the _domain_.",
        "",
        "```",
        "./gradlew :app:compileJava --console=verbose",
        "```",
        "",
        "The above command will compile the code in both sub-projects",
        "",
        "```",
        "> Task :domain:compileJava UP-TO-DATE",
        "> Task :app:compileJava UP-TO-DATE",
        "```",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "4144ad41-689c-47e4-97a5-5e8a8a98d232",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's configure the application's main class.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "eb1ab2ca-50ab-4f81-a050-44c4661f3836",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index bbbc317..a1fb4bb 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -2,6 +2,10 @@ plugins {",
        "     id 'application'",
        " }",
        " ",
        "+application {",
        "+    mainClass = 'gbc.app.Main'",
        "+}",
        "+",
        " java {",
        "     toolchain {",
        "         languageVersion = JavaLanguageVersion.of(17)",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "d89f0036-7c71-4cd3-a9b2-e550f727f60f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We are all set to run the application using Gradle. We can pass the command line arguments using",
        "the [`--args` argument](https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/JavaExec.html#setArgsString-java.lang.String-)."
      ]
    },
    {
      "type": "command",
      "id": "15b27493-3efc-4806-847d-cdf87a4d2c84",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew run --args=\"Tomatoes Carrots Oranges\""
      ],
      "expectedExitValue": 0
    },
    {
      "type": "markdown",
      "id": "96f2097d-d8f6-4990-97a5-12137f78121c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This will print each item added to the shopping-cart.",
        "",
        "```",
        "> Task :app:run",
        "Need to buy",
        "  > Tomatoes",
        "  > Carrots",
        "  > Oranges",
        "```",
        "",
        "We know that our Jar file is not yet a Fat Jar as we are missing the classes from the Guava dependency. Let's use the",
        "ShadowJar plugin to create the Fat Jar.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "f73fb3c2-c8b3-4238-bb35-3406c017ee49",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index bbbc317..cf80c2a 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -1,5 +1,6 @@",
        " plugins {",
        "     id 'application'",
        "+    id 'com.github.johnrengelman.shadow' version '7.1.2'",
        " }",
        " ",
        " application {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "9ae9ee01-fe66-4514-80fd-7e4087509aae",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's list the tasks available to our project."
      ]
    },
    {
      "type": "command",
      "id": "4fd25cec-6ef9-4c89-9f5e-6f265da65c3d",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew tasks"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "6d81ab29-61c9-4efe-aed6-321ae7c331c3",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The ShadowJar plugin add the _Shadow tasks_ group.",
        " ",
        "```",
        "Shadow tasks",
        "------------",
        "knows - Do you know who knows?",
        "shadowJar - Create a combined JAR of project and runtime dependencies",
        "```",
        "",
        "Let's create the Fat Jar.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "bec1f871-6e38-40b2-b580-f25242793a4b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew shadowJar"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "cc57a343-2756-40cd-aaf9-1ea64991e4a4",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's list the created Jar files."
      ]
    },
    {
      "type": "command",
      "id": "87c735b0-bfe3-4bbd-8435-8ddf5df14f35",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "tree app/build/libs"
      ]
    },
    {
      "type": "markdown",
      "id": "b7063851-fd5d-4b2a-95dd-06e3708d08fb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The application name is not as expected.",
        "",
        "```",
        "app/build/libs",
        "`-- app-all.jar",
        "```",
        "",
        "We want our application to be called `shopping-cart.jar`. Let's configure the `shadowJar` task.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "1d5d4a4e-6a3f-4b44-adf5-da69d4dccb61",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index e74a7fd..5a35bb2 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -29,3 +29,7 @@ testing {",
        "         }",
        "     }",
        " }",
        "+",
        "+tasks.named('shadowJar') {",
        "+    archiveFileName.set 'shopping-cart.jar'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "b0f307e3-7c95-4773-b9f3-ec3c765ed7a2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Clean the build and run the `shadowJar` task again.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "713fa451-948b-4182-8a29-77e2e60e0a84",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:2",
        "Why do we need to clean (delete) the `build` directory?",
        "",
        "Answer:2",
        "If we simply run the `shadowJar` task, the Jar file from the previous build will be there.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e67129ea-d382-4774-a676-7acad0859ba2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew clean shadowJar"
      ],
      "commandTimeout": 30.000000000
    },
    {
      "type": "markdown",
      "id": "95d1dbb7-2659-4e6f-ba66-499e06de92f8",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let run the new application."
      ]
    },
    {
      "type": "command",
      "id": "db3952c1-de6e-4a4f-b1f9-c48611972bbf",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "java -jar app/build/libs/shopping-cart.jar 'Frozen Yoghurt' 'White Sauce'"
      ]
    },
    {
      "type": "markdown",
      "id": "48f147e1-ded5-45a4-a9b3-328a350b174f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Our basic, multi-project shopping-cart is ready. We have two sub-projects, the _domain_ and the _app_, and split the",
        "classes accordingly. The application is packaged together in a single Fat Jar, using the `shadowJar` task. Let's commit",
        "our changes, before moving on to the next section.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "dd90f0e2-74d8-46f1-8fea-26c5c4bcfe12",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git add .",
        "git commit --message 'Create the application sub-project'"
      ]
    },
    {
      "type": "section",
      "id": "a295450a-9a96-4adc-b902-572b02648f64",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The api configuration"
      ]
    },
    {
      "type": "markdown",
      "id": "f8437044-272f-4981-bd41-91cb3f3fa59f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The `java-library` plugin exposes two configurations that can be used to declare dependencies: `api`",
        "and `implementation`. We have used the `implementation` configuration. In the section we are going to see the difference",
        "between these two configurations and how can be used.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "63913d1b-d296-43ca-bdd9-84eeca4ec3fb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git tag --annotate 'v3' --message 'The api configuration'"
      ]
    },
    {
      "type": "markdown",
      "id": "6d6fd521-3622-481c-a9b2-51b251151027",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The _app_ sub-project depends on the _domain_ project, which in turn depends on the _Guava_ dependency. The _app_",
        "sub-project depends on the _Guava_ dependency transitively.",
        ""
      ]
    },
    {
      "type": "question",
      "id": "b338786c-4bf9-431c-b6b4-f51c3b172fa7",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Question:3",
        "Can we use the _Guava_ dependency from within the _app_ sub-project without including in the _app_ sub-project",
        "dependencies?",
        "",
        "Answer:4",
        "No. If we want to use the _Guava_ dependency from within the _app_ sub-project then we need to include it in the list of",
        "dependencies of the _app_ sub-project or... change the configuration within the _domain_ project from `implementation`",
        "to `api`.",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "1c9425b0-999e-447f-8c8d-c88b8fa9d73e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's try to use the Guava dependency from within the _app_ sub-project without including in the _app_ sub-project",
        "dependencies.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "f910ce94-1bcb-4a48-bd75-85d036707548",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/src/main/java/gbc/app/Main.java b/app/src/main/java/gbc/app/Main.java",
        "index f305de4..87b8932 100644",
        "--- a/app/src/main/java/gbc/app/Main.java",
        "+++ b/app/src/main/java/gbc/app/Main.java",
        "@@ -4,8 +4,14 @@ import gbc.domain.Cart;",
        " ",
        " import java.util.Arrays;",
        " ",
        "+import static com.google.common.base.Preconditions.checkArgument;",
        "+import static com.google.common.base.Preconditions.checkNotNull;",
        "+",
        " public class Main {",
        "     public static void main(final String[] args) {",
        "+        checkNotNull(args);",
        "+        checkArgument(args.length > 0);",
        "+",
        "         final Cart cart = new Cart();",
        "         Arrays.stream(args).forEach(cart::add);",
        " ",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "15655c53-6fd1-45bc-a6fc-8324f83b1379",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now let's try to compile the code."
      ]
    },
    {
      "type": "command",
      "id": "d933a51e-f883-413a-ac85-35419c1343dd",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew :app:compileJava"
      ],
      "expectedExitValue": 1
    },
    {
      "type": "markdown",
      "id": "01aff8e9-6e7a-4402-91d5-e9a2d298634f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The compiler fails.",
        "",
        "```",
        "> Task :app:compileJava FAILED",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:7: error: package com.google.common.base does not exist",
        "import static com.google.common.base.Preconditions.checkArgument;",
        "                                    ^",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:7: error: static import only from classes and interfaces",
        "import static com.google.common.base.Preconditions.checkArgument;",
        "^",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:8: error: package com.google.common.base does not exist",
        "import static com.google.common.base.Preconditions.checkNotNull;",
        "                                    ^",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:8: error: static import only from classes and interfaces",
        "import static com.google.common.base.Preconditions.checkNotNull;",
        "^",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:12: error: cannot find symbol",
        "        checkNotNull(args);",
        "        ^",
        "  symbol:   method checkNotNull(String[])",
        "  location: class Main",
        "/opt/workspace/multi-project-application/app/src/main/java/gbc/app/Main.java:13: error: cannot find symbol",
        "        checkArgument(args.length > 0);",
        "        ^",
        "  symbol:   method checkArgument(boolean)",
        "  location: class Main",
        "6 errors",
        "",
        "FAILURE: Build failed with an exception.",
        "```",
        "",
        "Let's understand why this is failing. Let's list the runtime dependencies for the _app_ sub-project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "bb8c2ccd-0592-49d1-83e4-76db3bd98001",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew :app:dependencies --configuration runtimeClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "3b7eaf0c-c318-4d70-8abe-db61648a5cb3",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "At runtime (not compile time), the Guava dependency and its dependencies are all available. In other words",
        "the `Main.class` has access to the Guava dependency.",
        "",
        "```",
        "runtimeClasspath - Runtime classpath of source set 'main'.",
        "\\--- project :domain",
        "     \\--- com.google.guava:guava:31.0.1-jre",
        "          +--- com.google.guava:failureaccess:1.0.1",
        "          +--- com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava",
        "          +--- com.google.code.findbugs:jsr305:3.0.2",
        "          +--- org.checkerframework:checker-qual:3.12.0",
        "          +--- com.google.errorprone:error_prone_annotations:2.7.1",
        "          \\--- com.google.j2objc:j2objc-annotations:1.3",
        "```",
        "",
        "Now, let see the compile time dependency for the _app_ sub-project.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "5bff8934-f60d-4246-9eee-7975bceb5a8c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew :app:dependencies --configuration compileClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "cd8aeb7f-cbf2-4996-997b-d41cf133d858",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The _app_ sub-project has only access to the classes found within the _domain_ sub-project, and nothing more.",
        "",
        "```",
        "compileClasspath - Compile classpath for source set 'main'.",
        "\\--- project :domain",
        "```",
        "",
        "That's because the _domain_ sub-project is using the `implementation` configuration. Let's switch to the `api`",
        "configuration.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "1c1ba7b0-1c29-45bc-8e0b-e4d4aae150c4",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/build.gradle b/domain/build.gradle",
        "index 442b3db..1eb93f3 100644",
        "--- a/domain/build.gradle",
        "+++ b/domain/build.gradle",
        "@@ -14,7 +14,7 @@ repositories {",
        " }",
        " ",
        " dependencies {",
        "-    implementation 'com.google.guava:guava:31.0.1-jre'",
        "+    api 'com.google.guava:guava:31.0.1-jre'",
        " }",
        " ",
        " testing {",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "7b3ed0fa-b713-439f-b3b0-4325abafcb5f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now let's see the compile time dependencies for the _app_ sub-project, once again."
      ]
    },
    {
      "type": "command",
      "id": "3668b416-c4ec-4029-9dd1-005d3d9dce50",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew :app:dependencies --configuration compileClasspath"
      ]
    },
    {
      "type": "markdown",
      "id": "f2810344-74c6-40a2-b162-a08c357806e3",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now, the transitive dependencies are made visible without the need to including them in the _app_ sub-project",
        "dependencies list.",
        "",
        "```",
        "compileClasspath - Compile classpath for source set 'main'.",
        "\\--- project :domain",
        "     \\--- com.google.guava:guava:31.0.1-jre",
        "          +--- com.google.guava:failureaccess:1.0.1",
        "          +--- com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava",
        "          +--- com.google.code.findbugs:jsr305:3.0.2",
        "          +--- org.checkerframework:checker-qual:3.12.0",
        "          +--- com.google.errorprone:error_prone_annotations:2.7.1",
        "          \\--- com.google.j2objc:j2objc-annotations:1.3",
        "```",
        "",
        "The `api` configuration makes the compile time dependencies much like the runtime dependencies for the _app_",
        "sub-project. When it comes to libraries, I prefer the `api` configuration over the `implementation`, but other firmly",
        "believe that each sub-project should include the dependencies they need and not rely on transitive dependencies.",
        "",
        "Compile the application once more.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "3b8ae29e-30cd-4315-a350-d45c0c8cb9d4",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew :app:compileJava"
      ]
    },
    {
      "type": "markdown",
      "id": "97bbe289-6510-490c-baf7-82d1550f1b24",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The application now compiles without error."
      ]
    },
    {
      "type": "command",
      "id": "c75a6d6d-493b-4abd-910a-110b749afdcb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git add .",
        "git commit --message 'Switch to api configuration and expose dependencies'"
      ]
    },
    {
      "type": "section",
      "id": "0dfd0f0c-fb63-4750-a0f8-1f8820de18bb",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The buildSrc"
      ]
    },
    {
      "type": "markdown",
      "id": "bc5ee302-6e18-474b-b663-c1a4195e6a3b",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "If you observe closely, you will notice that both `build.gradle` files are quite similar. They have lots of duplication.",
        "Gradle provides a way to refactor the duplication into a single place. In this section we will refactor both",
        "sub-projects and tack advantage of",
        "the [`buildSrc`](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#sec:build_sources).",
        ""
      ]
    },
    {
      "type": "command",
      "id": "680dbd5e-ef84-4b6c-9497-35862bea21dc",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git tag --annotate 'v4' --message 'The buildSrc'"
      ]
    },
    {
      "type": "markdown",
      "id": "01232859-5b04-4010-80ff-54ccd2944596",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Gradle automatically compiles and tests this code under the `buildSrc` directory and make it available to the project",
        "(and sub-projects) build script (`build.gradle`). There can only be one `buildSrc` directory and this must be at the",
        "project root directory.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "e6279368-e51d-4539-b478-129e8009b0c4",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir 'buildSrc'"
      ]
    },
    {
      "type": "markdown",
      "id": "a15669ce-f730-4459-906c-25980d872c02",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "It is recommended to include the `settings.gradle` file, even if it is left empty.",
        "",
        "> We recommend that you also create a `buildSrc/settings.gradle` file, which you may leave empty.",
        "",
        "See",
        "the [precompiled script plugins](https://docs.gradle.org/current/userguide/custom_plugins.html#sec:precompiled_plugins)",
        "section for more details.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "44831b56-72e0-4486-afdc-71698893e7af",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'buildSrc/settings.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "c5e775b9-3daf-4f19-a9cb-4ea6a020a56e",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The `buildSrc` can be seen as another sub-project, even though it is not. It needs to have its own `build.gradle` as we",
        "need to define plugins and dependencies that we will be using.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "169ea435-e76f-46c3-8f33-8a14235bc2bc",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'buildSrc/build.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "bb677b84-7d85-4d66-822d-b54a1dbb9e4f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We need to include the `groovy-gradle-plugin` plugin. With this plugin, Gradle will be able to precompile the code found",
        "within the `buildSrc` directory and make this available to the rest of the project (and sub-projects).",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "29a33bf4-2560-4cba-a442-a9ac599ca573",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle",
        "index e69de29..6784052 100644",
        "--- a/buildSrc/build.gradle",
        "+++ b/buildSrc/build.gradle",
        "@@ -0,0 +1,3 @@",
        "+plugins {",
        "+    id 'groovy-gradle-plugin'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "b61bea8d-0884-41aa-848b-45b329425775",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The idea is to reduce the duplication found in the `domain/build.gradle` and `app/build.gradle` build scripts. These are",
        "using the Groovy DSL. So, let's create the Groovy directory structure for the common configuration.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "21304884-a1b7-48b3-b7a1-a57a875ca379",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "mkdir -p 'buildSrc/src/main/groovy'"
      ]
    },
    {
      "type": "markdown",
      "id": "59c1669f-dde7-4874-ac99-750737993cd0",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's create the `gbc.java-common-conventions.gradle` file and start putting the common configuration there. The file",
        "name is important as this will be used as a plugin name, as shown next.",
        "",
        "```",
        "plugins {",
        "    id 'gbc.java-common-conventions'",
        "}",
        "```",
        "",
        "When importing this script, we omit the file extension.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "5230563f-bb33-46ea-84cb-06b6d1c915e2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'buildSrc/src/main/groovy/gbc.java-common-conventions.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "e5af80a6-3edd-4806-814f-80879ea0858d",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Both the `domain/build.gradle` and `app/build.gradle` build scripts use",
        "",
        "- the `java` plugin",
        "",
        "  ```",
        "  plugins {",
        "      id 'java'",
        "  }",
        "  ```",
        "",
        "- Java 17, through the toolchain",
        "",
        "  ```",
        "  java {",
        "      toolchain {",
        "          languageVersion = JavaLanguageVersion.of(17)",
        "          vendor = JvmVendorSpec.ORACLE",
        "      }",
        "  }",
        "  ```",
        "",
        "- the Maven central repository",
        "",
        "  ```",
        "  repositories {",
        "      mavenCentral()",
        "  }",
        "  ```",
        "",
        "- the JUnit 5 testing framework",
        "",
        "  ```",
        "  testing {",
        "      suites {",
        "          test {",
        "            useJUnitJupiter('5.8.2')",
        "          }",
        "      }",
        "  }",
        "  ```",
        "",
        "The `domain/build.gradle` also includes a dependency. We can create a constraint so that whoever includes this",
        "dependency can omit the version and the one specified here will be picked.",
        "",
        "```",
        "dependencies {",
        "    constraints {",
        "        implementation 'com.google.guava:guava:31.0.1-jre'",
        "    }",
        "}",
        "```",
        "",
        "Note that the above simply provides a default version number and does not enforce the version to be used. ",
        "",
        "We can put all these in the `gbc.java-common-conventions.gradle` file.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "8e0169c1-f7d3-44b0-8309-7c25a1aa7f08",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc.java-common-conventions.gradle b/buildSrc/src/main/groovy/gbc.java-common-conventions.gradle",
        "index e69de29..4245b7e 100644",
        "--- a/buildSrc/src/main/groovy/gbc.java-common-conventions.gradle",
        "+++ b/buildSrc/src/main/groovy/gbc.java-common-conventions.gradle",
        "@@ -0,0 +1,28 @@",
        "+plugins {",
        "+    id 'java'",
        "+}",
        "+",
        "+java {",
        "+    toolchain {",
        "+        languageVersion = JavaLanguageVersion.of(17)",
        "+        vendor = JvmVendorSpec.ORACLE",
        "+    }",
        "+}",
        "+",
        "+repositories {",
        "+    mavenCentral()",
        "+}",
        "+",
        "+dependencies {",
        "+    constraints {",
        "+        implementation 'com.google.guava:guava:31.0.1-jre'",
        "+    }",
        "+}",
        "+",
        "+testing {",
        "+    suites {",
        "+        test {",
        "+            useJUnitJupiter('5.8.2')",
        "+        }",
        "+    }",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "ab600d2e-933c-4981-a952-8e7f572265ae",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We can stop here, and use the `gbc.java-common-conventions.gradle` script as it is, or take it one step further and",
        "define an application and a library specific common configurations. Let's do that.",
        "",
        "We have to sub-project types, a `java-library` (the _domain_ sub-project) and an `application` (the _app_ sub-project),",
        "where the latter depends on the former. It is simpler to start with the project that has the least dependants as this",
        "has the least impact. Changing the _domain_ sub-project will affect both the _domain_ and the _app_ sub-projects while",
        "changing the _app_ will only affect the _app_ sub-project. The _domain_ sub-project is not affected.",
        "",
        "Let's create another configuration script for the `application` type sub-projects.",
        ""
      ]
    },
    {
      "type": "command",
      "id": "b53f382c-4df6-4544-b4cb-4904748446f5",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'buildSrc/src/main/groovy/gbc.java-application-conventions.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "05c02d79-34f9-48d5-a534-989fefafcefe",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This is quite simple. It extends the `gbc.java-common-conventions` plugin defined before, and the `application`",
        "and `shadowJar` plugins. No need to add anything else.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "400dd481-d238-4e4b-b203-90e130b2bf5c",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc.java-application-conventions.gradle b/buildSrc/src/main/groovy/gbc.java-application-conventions.gradle",
        "index e69de29..8027559 100644",
        "--- a/buildSrc/src/main/groovy/gbc.java-application-conventions.gradle",
        "+++ b/buildSrc/src/main/groovy/gbc.java-application-conventions.gradle",
        "@@ -0,0 +1,5 @@",
        "+plugins {",
        "+    id 'application'",
        "+    id 'gbc.java-common-conventions'",
        "+    id 'com.github.johnrengelman.shadow'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "f7a73f82-ad65-4aca-afaf-5f5ccffbe26f",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now, we can simplify the `app/build.gradle` build script by simply using the `gbc.java-application-conventions` plugin.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "fd31ff58-db11-44d7-86b6-e90b4527ad26",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/app/build.gradle b/app/build.gradle",
        "index c2bc0fb..d52ee60 100644",
        "--- a/app/build.gradle",
        "+++ b/app/build.gradle",
        "@@ -1,35 +1,15 @@",
        " plugins {",
        "-    id 'application'",
        "-    id 'com.github.johnrengelman.shadow' version '7.1.2'",
        "+    id 'gbc.java-application-conventions'",
        " }",
        " ",
        " application {",
        "     mainClass = 'gbc.app.Main'",
        " }",
        " ",
        "-java {",
        "-    toolchain {",
        "-        languageVersion = JavaLanguageVersion.of(17)",
        "-        vendor = JvmVendorSpec.ORACLE",
        "-    }",
        "-}",
        "-",
        "-repositories {",
        "-    mavenCentral()",
        "-}",
        "-",
        " dependencies {",
        "     implementation project(':domain')",
        " }",
        " ",
        "-testing {",
        "-    suites {",
        "-        test {",
        "-            useJUnitJupiter('5.8.2')",
        "-        }",
        "-    }",
        "-}",
        "-",
        " tasks.named('shadowJar') {",
        "     archiveFileName.set 'shopping-cart.jar'",
        " }",
        ""
      ]
    },
    {
      "type": "command",
      "id": "b0b2eab2-5ec8-49c1-ab1c-c135c148e8f5",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew build"
      ],
      "expectedExitValue": 1,
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "4dea8df0-25bc-460e-b918-cb8ae15a3c53",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "First note that we have new tasks, related to the `buildSrc`. Anything within the `buildSrc` is built and tested",
        "automatically, before the project related tasks are executed.",
        "",
        "```",
        "> Task :buildSrc:extractPluginRequests",
        "> Task :buildSrc:generatePluginAdapters",
        "> Task :buildSrc:compileJava",
        "> Task :buildSrc:compileGroovy NO-SOURCE",
        "> Task :buildSrc:compileGroovyPlugins",
        "> Task :buildSrc:pluginDescriptors",
        "> Task :buildSrc:processResources",
        "> Task :buildSrc:classes",
        "> Task :buildSrc:jar",
        "> Task :buildSrc:assemble",
        "> Task :buildSrc:pluginUnderTestMetadata",
        "> Task :buildSrc:compileTestJava NO-SOURCE",
        "> Task :buildSrc:compileTestGroovy NO-SOURCE",
        "> Task :buildSrc:processTestResources NO-SOURCE",
        "> Task :buildSrc:testClasses",
        "> Task :buildSrc:test NO-SOURCE",
        "> Task :buildSrc:validatePlugins",
        "> Task :buildSrc:check",
        "> Task :buildSrc:build",
        "```",
        "",
        "Unfortunately our build failed.",
        "",
        "```",
        "FAILURE: Build failed with an exception.",
        "",
        "* Where:",
        "Build file '/opt/workspace/multi-project-application/app/build.gradle' line: 2",
        "",
        "* What went wrong:",
        "An exception occurred applying plugin request [id: 'gbc.java-application-conventions']",
        "> Failed to apply plugin 'gbc.java-application-conventions'.",
        "   > org.gradle.api.plugins.UnknownPluginException: Plugin with id 'com.github.johnrengelman.shadow' not found.",
        "```",
        "",
        "Gradle is not able to determine the `com.github.johnrengelman.shadow` plugin version. Furthermore, we cannot provide the",
        "version for this plugin in the `buildSrc/src/main/groovy/gbc.java-application-conventions.gradle` file similar to what",
        "we did before. The following will not work.",
        "",
        "```",
        "plugins {",
        "    id 'application'",
        "    id 'gbc.java-common-conventions'",
        "    id 'com.github.johnrengelman.shadow' version '7.1.2'",
        "}",
        "```",
        "",
        "Instead, we need to include this in the `buildSrc/build.gradle` dependencies list.",
        ""
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "ff2de26c-89e5-4c8f-af48-6b2020444719",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle",
        "index 6784052..bb72493 100644",
        "--- a/buildSrc/build.gradle",
        "+++ b/buildSrc/build.gradle",
        "@@ -1,3 +1,11 @@",
        " plugins {",
        "     id 'groovy-gradle-plugin'",
        " }",
        "+",
        "+repositories {",
        "+    gradlePluginPortal()",
        "+}",
        "+",
        "+dependencies {",
        "+    implementation 'com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:7.1.2'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "75069853-8f0a-4203-872d-deac733137e6",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Now Gradle know which version of the `shadowJar` plugin to use. Let's build it again."
      ]
    },
    {
      "type": "command",
      "id": "73c94641-3fae-450e-b0b5-bfca946c4f53",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew build"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "148dd98c-73b3-4ca5-adc4-479911bae0d2",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "The _app_ sub-project is now ready.  Let's do the same for the _domain_ sub-project."
      ]
    },
    {
      "type": "command",
      "id": "29c342e8-1d7a-48ce-88a0-a2032d401945",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "touch 'buildSrc/src/main/groovy/gbc.java-library-conventions.gradle'"
      ]
    },
    {
      "type": "markdown",
      "id": "b328fae0-d86b-4021-a8c6-7695ad3f98be",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "This is slightly simpler as it only uses the `java-library` plugin."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "d0325251-5cf7-43b3-a397-78a70eee3a32",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/buildSrc/src/main/groovy/gbc.java-library-conventions.gradle b/buildSrc/src/main/groovy/gbc.java-library-conventions.gradle",
        "index e69de29..20f2f4c 100644",
        "--- a/buildSrc/src/main/groovy/gbc.java-library-conventions.gradle",
        "+++ b/buildSrc/src/main/groovy/gbc.java-library-conventions.gradle",
        "@@ -0,0 +1,4 @@",
        "+plugins {",
        "+    id 'java-library'",
        "+    id 'gbc.java-common-conventions'",
        "+}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "29271322-0fcb-4368-afa2-979e68fb3593",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Let's remove the unnecessary configuration from the `domain/build.gradle` build script."
      ]
    },
    {
      "type": "git-apply-patch",
      "id": "b3f8d593-827d-4e0a-8a0e-bce619b432ca",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "diff --git a/domain/build.gradle b/domain/build.gradle",
        "index 1eb93f3..d3b821e 100644",
        "--- a/domain/build.gradle",
        "+++ b/domain/build.gradle",
        "@@ -1,26 +1,7 @@",
        " plugins {",
        "-    id 'java-library'",
        "+    id 'gbc.java-library-conventions'",
        " }",
        "-",
        "-java {",
        "-    toolchain {",
        "-        languageVersion = JavaLanguageVersion.of(17)",
        "-        vendor = JvmVendorSpec.ORACLE",
        "-    }",
        "-}",
        "-",
        "-repositories {",
        "-    mavenCentral()",
        "-}",
        " ",
        " dependencies {",
        "-    api 'com.google.guava:guava:31.0.1-jre'",
        "+    api 'com.google.guava:guava'",
        " }",
        "-",
        "-testing {",
        "-    suites {",
        "-        test {",
        "-            useJUnitJupiter('5.8.2')",
        "-        }",
        "-    }",
        "-}",
        ""
      ]
    },
    {
      "type": "markdown",
      "id": "5f7214c1-59bd-4776-ac99-ac3f2a7b7936",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "Build the project once more."
      ]
    },
    {
      "type": "command",
      "id": "a95ee5d0-6b68-4485-ab34-a27dbf271418",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "./gradlew build"
      ],
      "commandTimeout": 60.000000000
    },
    {
      "type": "markdown",
      "id": "6571480b-a3e0-45b3-93f9-1e31515db780",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "We have successfully refactored the duplication out into a common place and imported it as a plugin."
      ]
    },
    {
      "type": "command",
      "id": "5ca7a09e-a50a-4959-bd18-6c39d5660348",
      "workingDirectory": "multi-project-application",
      "parameters": [
        "git add .",
        "git commit --message 'Move the duplicate configuration to buildSrc'"
      ]
    }
  ]
}